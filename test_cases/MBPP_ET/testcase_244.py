from case_MBPP_244 import Find_Min


def check(candidate):
    assert candidate([[1],[1,2],[1,2,3]]) == [1]
    assert candidate([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]
    assert candidate([['x'],['x','y'],['x','y','z']]) == ['x']
    assert candidate([[5], [3, 6], [5, 6, 7]]) == [3, 6]
    assert candidate([[1], [6, 1], [3, 5, 4]]) == [1]
    assert candidate([[5], [4, 1], [5, 1, 5]]) == [4, 1]
    assert candidate([[1], [1, 6], [2, 2, 8]]) == [1]
    assert candidate([[6], [4, 7], [2, 2, 4]]) == [2, 2, 4]
    assert candidate([[6], [1, 7], [1, 1, 7]]) == [1, 1, 7]
    assert candidate([[3], [2, 5], [2, 3, 5]]) == [2, 3, 5]
    assert candidate([[4], [6, 6], [1, 3, 5]]) == [1, 3, 5]
    assert candidate([[1], [5, 4], [6, 2, 2]]) == [1]
    assert candidate([[6], [4, 4], [5, 4, 4]]) == [4, 4]
    assert candidate([[5], [4, 5], [5, 6, 1]]) == [4, 5]
    assert candidate([[6], [6, 6], [4, 7, 8]]) == [4, 7, 8]
    assert candidate([[6], [1, 5], [5, 6, 4]]) == [1, 5]
    assert candidate([[4], [4, 4], [6, 6, 3]]) == [4]
    assert candidate([[6], [5, 3], [6, 3, 2]]) == [5, 3]
    assert candidate([[3], [1, 2], [2, 6, 5]]) == [1, 2]
    assert candidate([[6], [1, 6], [2, 3, 8]]) == [1, 6]
    assert candidate([[5], [6, 5], [2, 5, 6]]) == [2, 5, 6]
    assert candidate([[3], [4, 1], [3, 7, 7]]) == [3]
    assert candidate([[2], [2, 2], [5, 7, 5]]) == [2]
    assert candidate([[3], [4, 7], [5, 3, 7]]) == [3]
    assert candidate([[6], [4, 3], [1, 2, 6]]) == [1, 2, 6]
    assert candidate([[3], [3, 1], [2, 2, 5]]) == [2, 2, 5]
    assert candidate([[1], [3, 7], [1, 2, 6]]) == [1]
    assert candidate([[3], [2, 5], [6, 2, 1]]) == [2, 5]
    assert candidate([[4], [3, 4], [4, 3, 8]]) == [3, 4]
    assert candidate([[1], [1, 4], [4, 6, 7]]) == [1]
    assert candidate([[5], [6, 5], [5, 5, 6]]) == [5]
    assert candidate([[3], [3, 4], [3, 1, 6]]) == [3]
    assert candidate([[6], [3, 3], [4, 2, 8]]) == [3, 3]
    assert candidate([[4], [3, 7], [6, 5, 8]]) == [3, 7]
    assert candidate([[4], [4, 6], [2, 5, 1]]) == [2, 5, 1]
    assert candidate([[4], [6, 2], [4, 6, 7]]) == [4]
    assert candidate([[4, 5], [1, 4, 1], [6, 2, 9, 13]]) == [1, 4, 1]
    assert candidate([[4, 3], [4, 5, 3], [2, 3, 4, 8]]) == [2, 3, 4, 8]
    assert candidate([[3, 4], [5, 6, 4], [6, 5, 4, 12]]) == [3, 4]
    assert candidate([[4, 4], [1, 5, 6], [5, 3, 12, 11]]) == [1, 5, 6]
    assert candidate([[2, 2], [4, 2, 5], [1, 5, 10, 3]]) == [1, 5, 10, 3]
    assert candidate([[1, 6], [5, 2, 6], [5, 7, 11, 5]]) == [1, 6]
    assert candidate([[3, 1], [4, 2, 1], [2, 5, 6, 5]]) == [2, 5, 6, 5]
    assert candidate([[2, 4], [2, 1, 1], [4, 3, 11, 9]]) == [2, 1, 1]
    assert candidate([[1, 4], [2, 2, 4], [5, 4, 10, 8]]) == [1, 4]
    assert candidate([[2, 2], [1, 5, 6], [5, 7, 2, 8]]) == [1, 5, 6]
    assert candidate([[3, 6], [4, 2, 3], [6, 2, 7, 12]]) == [3, 6]
    assert candidate([[2, 1], [3, 1, 5], [1, 6, 10, 11]]) == [1, 6, 10, 11]
    assert candidate([[3, 4], [5, 1, 2], [3, 5, 4, 11]]) == [3, 4]
    assert candidate([[4, 2], [4, 1, 3], [5, 7, 4, 4]]) == [4, 1, 3]
    assert candidate([[5, 3], [6, 1, 1], [6, 5, 11, 7]]) == [5, 3]
    assert candidate([[2, 6], [5, 6, 2], [3, 7, 3, 11]]) == [2, 6]
    assert candidate([[4, 6], [6, 4, 6], [6, 2, 8, 7]]) == [4, 6]
    assert candidate([[4, 2], [6, 4, 5], [1, 6, 3, 4]]) == [1, 6, 3, 4]
    assert candidate([[4, 3], [6, 2, 2], [2, 2, 7, 10]]) == [2, 2, 7, 10]
    assert candidate([[2, 1], [3, 5, 4], [4, 6, 12, 9]]) == [2, 1]
    assert candidate([[3, 6], [2, 3, 6], [3, 2, 10, 8]]) == [2, 3, 6]
    assert candidate([[2, 6], [6, 2, 3], [6, 2, 9, 8]]) == [2, 6]
    assert candidate([[6, 2], [2, 1, 3], [2, 2, 8, 4]]) == [2, 1, 3]
    assert candidate([[2, 5], [4, 4, 5], [2, 2, 3, 12]]) == [2, 2, 3, 12]
    assert candidate([[6, 5], [4, 2, 2], [2, 7, 8, 13]]) == [2, 7, 8, 13]
    assert candidate([[5, 5], [3, 6, 5], [2, 6, 12, 11]]) == [2, 6, 12, 11]
    assert candidate([[6, 6], [1, 2, 3], [4, 2, 2, 9]]) == [1, 2, 3]
    assert candidate([[1, 6], [2, 6, 1], [5, 7, 7, 7]]) == [1, 6]
    assert candidate([[5, 2], [6, 4, 6], [6, 2, 6, 5]]) == [5, 2]
    assert candidate([[2, 5], [4, 5, 3], [6, 4, 6, 12]]) == [2, 5]
    assert candidate([[3, 2], [3, 3, 5], [6, 6, 5, 10]]) == [3, 2]
    assert candidate([[2, 2], [2, 2, 2], [6, 5, 3, 9]]) == [2, 2]
    assert candidate([[1, 3], [6, 4, 2], [1, 7, 8, 7]]) == [1, 3]
    assert candidate([['l'], ['a', 'v'], ['z', 'j', 'r']]) == ['a', 'v']
    assert candidate([['t'], ['w', 'e'], ['a', 't', 'z']]) == ['a', 't', 'z']
    assert candidate([['n'], ['w', 'b'], ['y', 'u', 'r']]) == ['n']
    assert candidate([['w'], ['w', 'e'], ['p', 'v', 'm']]) == ['p', 'v', 'm']
    assert candidate([['i'], ['u', 'u'], ['t', 'r', 'n']]) == ['i']
    assert candidate([['g'], ['p', 'n'], ['z', 'y', 'd']]) == ['g']
    assert candidate([['n'], ['y', 'h'], ['t', 'b', 't']]) == ['n']
    assert candidate([['h'], ['f', 'z'], ['u', 'j', 'i']]) == ['f', 'z']
    assert candidate([['u'], ['c', 'a'], ['q', 'u', 'v']]) == ['c', 'a']
    assert candidate([['w'], ['g', 'u'], ['y', 'i', 'c']]) == ['g', 'u']
    assert candidate([['k'], ['m', 'w'], ['t', 'y', 'a']]) == ['k']
    assert candidate([['z'], ['p', 'd'], ['i', 'l', 'j']]) == ['i', 'l', 'j']
    assert candidate([['d'], ['w', 'f'], ['d', 'm', 'o']]) == ['d']
    assert candidate([['i'], ['d', 'i'], ['q', 'l', 'd']]) == ['d', 'i']
    assert candidate([['d'], ['m', 'f'], ['w', 'r', 'u']]) == ['d']
    assert candidate([['l'], ['i', 'g'], ['t', 'm', 'z']]) == ['i', 'g']
    assert candidate([['n'], ['i', 'n'], ['c', 'p', 'v']]) == ['c', 'p', 'v']
    assert candidate([['q'], ['c', 'o'], ['y', 'k', 'p']]) == ['c', 'o']
    assert candidate([['s'], ['y', 'b'], ['r', 'd', 'r']]) == ['r', 'd', 'r']
    assert candidate([['d'], ['r', 't'], ['z', 'o', 'i']]) == ['d']
    assert candidate([['n'], ['v', 'd'], ['t', 'd', 'b']]) == ['n']
    assert candidate([['h'], ['e', 'i'], ['g', 'k', 'm']]) == ['e', 'i']
    assert candidate([['c'], ['d', 'c'], ['j', 's', 'r']]) == ['c']
    assert candidate([['u'], ['k', 'm'], ['p', 'w', 'b']]) == ['k', 'm']
    assert candidate([['y'], ['m', 'r'], ['n', 'v', 'f']]) == ['m', 'r']
    assert candidate([['a'], ['o', 'y'], ['f', 'y', 'p']]) == ['a']
    assert candidate([['x'], ['a', 'l'], ['i', 'm', 'k']]) == ['a', 'l']
    assert candidate([['p'], ['w', 'r'], ['s', 'l', 'h']]) == ['p']
    assert candidate([['c'], ['e', 'm'], ['e', 'z', 'p']]) == ['c']
    assert candidate([['x'], ['q', 'p'], ['j', 'm', 'g']]) == ['j', 'm', 'g']
    assert candidate([['c'], ['e', 'h'], ['j', 'j', 'q']]) == ['c']
    assert candidate([['v'], ['s', 'w'], ['f', 'm', 'f']]) == ['f', 'm', 'f']
    assert candidate([['n'], ['t', 'g'], ['i', 'c', 'w']]) == ['i', 'c', 'w']

if __name__ == '__main__':
    check(Find_Min)