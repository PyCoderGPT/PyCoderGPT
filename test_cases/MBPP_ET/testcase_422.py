from case_MBPP_422 import max_sum_list


def check(candidate):
    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] 
    assert candidate([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] 
    assert candidate([[2,3,1]])==[2,3,1] 
    assert candidate([[4, 5, 1], [2, 2, 6], [5, 16, 17], [9, 8, 14]]) == [5, 16, 17]
    assert candidate([[3, 3, 4], [9, 6, 1], [6, 15, 15], [2, 4, 11]]) == [6, 15, 15]
    assert candidate([[1, 1, 8], [9, 7, 8], [7, 9, 9], [3, 4, 10]]) == [7, 9, 9]
    assert candidate([[5, 7, 7], [2, 6, 5], [14, 14, 14], [6, 13, 10]]) == [14, 14, 14]
    assert candidate([[1, 1, 6], [4, 1, 6], [15, 12, 16], [3, 10, 14]]) == [15, 12, 16]
    assert candidate([[1, 7, 7], [7, 1, 10], [13, 15, 14], [2, 12, 8]]) == [13, 15, 14]
    assert candidate([[2, 3, 5], [5, 3, 11], [13, 13, 17], [4, 9, 13]]) == [13, 13, 17]
    assert candidate([[3, 3, 5], [9, 4, 6], [15, 6, 15], [8, 3, 9]]) == [15, 6, 15]
    assert candidate([[5, 5, 3], [9, 2, 5], [5, 13, 13], [7, 3, 6]]) == [5, 13, 13]
    assert candidate([[3, 3, 6], [8, 3, 4], [7, 16, 15], [9, 11, 10]]) == [7, 16, 15]
    assert candidate([[3, 6, 2], [8, 5, 10], [12, 13, 10], [6, 10, 4]]) == [12, 13, 10]
    assert candidate([[4, 1, 2], [2, 1, 11], [8, 7, 9], [10, 11, 12]]) == [10, 11, 12]
    assert candidate([[6, 6, 4], [3, 6, 9], [6, 7, 11], [7, 7, 4]]) == [6, 7, 11]
    assert candidate([[5, 7, 6], [5, 7, 4], [10, 6, 10], [10, 4, 8]]) == [10, 6, 10]
    assert candidate([[6, 4, 7], [9, 10, 5], [11, 13, 17], [10, 5, 6]]) == [11, 13, 17]
    assert candidate([[5, 2, 8], [8, 7, 8], [13, 11, 11], [2, 3, 10]]) == [13, 11, 11]
    assert candidate([[5, 5, 2], [8, 10, 11], [5, 9, 9], [7, 12, 11]]) == [7, 12, 11]
    assert candidate([[2, 1, 3], [2, 8, 3], [13, 14, 7], [8, 11, 14]]) == [13, 14, 7]
    assert candidate([[6, 3, 3], [8, 5, 6], [14, 10, 14], [8, 8, 5]]) == [14, 10, 14]
    assert candidate([[3, 2, 8], [2, 4, 2], [13, 13, 16], [7, 7, 7]]) == [13, 13, 16]
    assert candidate([[2, 1, 7], [3, 2, 1], [10, 11, 13], [7, 6, 13]]) == [10, 11, 13]
    assert candidate([[5, 1, 8], [2, 9, 8], [13, 7, 11], [10, 11, 10]]) == [13, 7, 11]
    assert candidate([[1, 7, 8], [3, 2, 8], [6, 16, 12], [5, 6, 8]]) == [6, 16, 12]
    assert candidate([[5, 2, 3], [7, 8, 6], [14, 7, 8], [5, 8, 8]]) == [14, 7, 8]
    assert candidate([[2, 6, 6], [6, 6, 3], [8, 11, 16], [4, 8, 5]]) == [8, 11, 16]
    assert candidate([[2, 3, 4], [1, 6, 9], [9, 6, 17], [3, 6, 10]]) == [9, 6, 17]
    assert candidate([[3, 5, 1], [8, 1, 6], [10, 7, 14], [10, 6, 4]]) == [10, 7, 14]
    assert candidate([[6, 2, 6], [6, 1, 6], [7, 9, 16], [10, 4, 14]]) == [7, 9, 16]
    assert candidate([[3, 2, 7], [2, 9, 9], [13, 8, 12], [2, 13, 4]]) == [13, 8, 12]
    assert candidate([[6, 4, 2], [2, 3, 11], [11, 7, 14], [8, 10, 9]]) == [11, 7, 14]
    assert candidate([[5, 3, 1], [5, 5, 2], [13, 15, 14], [10, 10, 13]]) == [13, 15, 14]
    assert candidate([[5, 6, 2], [4, 9, 1], [8, 12, 9], [7, 6, 4]]) == [8, 12, 9]
    assert candidate([[5, 6, 7], [2, 4, 4], [12, 10, 8], [3, 8, 6]]) == [12, 10, 8]
    assert candidate([[5, 3, 6], [4, 2, 9], [13, 15, 14]]) == [13, 15, 14]
    assert candidate([[5, 1, 6], [8, 9, 1], [7, 9, 11]]) == [7, 9, 11]
    assert candidate([[7, 3, 3], [6, 3, 5], [16, 9, 7]]) == [16, 9, 7]
    assert candidate([[4, 2, 6], [9, 4, 8], [10, 11, 6]]) == [10, 11, 6]
    assert candidate([[4, 5, 4], [5, 8, 2], [9, 7, 12]]) == [9, 7, 12]
    assert candidate([[5, 5, 1], [10, 10, 9], [14, 14, 12]]) == [14, 14, 12]
    assert candidate([[2, 2, 1], [8, 10, 7], [16, 11, 11]]) == [16, 11, 11]
    assert candidate([[7, 5, 3], [9, 8, 2], [11, 13, 13]]) == [11, 13, 13]
    assert candidate([[5, 4, 1], [11, 4, 6], [13, 11, 13]]) == [13, 11, 13]
    assert candidate([[5, 4, 3], [10, 2, 4], [9, 8, 10]]) == [9, 8, 10]
    assert candidate([[4, 6, 5], [1, 7, 8], [7, 13, 7]]) == [7, 13, 7]
    assert candidate([[6, 2, 6], [8, 2, 1], [14, 8, 15]]) == [14, 8, 15]
    assert candidate([[4, 6, 5], [11, 5, 3], [13, 13, 10]]) == [13, 13, 10]
    assert candidate([[1, 6, 2], [7, 10, 1], [12, 11, 6]]) == [12, 11, 6]
    assert candidate([[7, 4, 6], [1, 9, 2], [7, 16, 15]]) == [7, 16, 15]
    assert candidate([[8, 3, 6], [6, 2, 4], [8, 10, 15]]) == [8, 10, 15]
    assert candidate([[4, 2, 4], [1, 2, 2], [17, 8, 9]]) == [17, 8, 9]
    assert candidate([[6, 7, 1], [4, 4, 9], [10, 6, 15]]) == [10, 6, 15]
    assert candidate([[5, 1, 6], [2, 8, 1], [16, 6, 13]]) == [16, 6, 13]
    assert candidate([[4, 3, 6], [3, 3, 1], [17, 10, 10]]) == [17, 10, 10]
    assert candidate([[8, 6, 3], [2, 1, 1], [9, 8, 13]]) == [9, 8, 13]
    assert candidate([[2, 4, 5], [7, 4, 3], [8, 8, 13]]) == [8, 8, 13]
    assert candidate([[4, 6, 4], [5, 4, 7], [8, 16, 12]]) == [8, 16, 12]
    assert candidate([[7, 7, 3], [5, 1, 4], [15, 11, 8]]) == [15, 11, 8]
    assert candidate([[4, 2, 2], [10, 7, 7], [7, 16, 10]]) == [7, 16, 10]
    assert candidate([[1, 7, 5], [2, 10, 1], [15, 9, 10]]) == [15, 9, 10]
    assert candidate([[6, 6, 1], [10, 1, 7], [11, 15, 5]]) == [11, 15, 5]
    assert candidate([[4, 3, 5], [2, 8, 2], [12, 10, 12]]) == [12, 10, 12]
    assert candidate([[4, 1, 2], [6, 10, 7], [11, 16, 13]]) == [11, 16, 13]
    assert candidate([[4, 3, 1], [9, 10, 4], [11, 13, 14]]) == [11, 13, 14]
    assert candidate([[1, 4, 3], [7, 6, 4], [16, 8, 7]]) == [16, 8, 7]
    assert candidate([[2, 7, 3], [7, 6, 4], [11, 16, 15]]) == [11, 16, 15]
    assert candidate([[6, 2, 5], [11, 5, 2], [8, 11, 9]]) == [8, 11, 9]
    assert candidate([[2, 8, 6]]) == [2, 8, 6]
    assert candidate([[7, 7, 2]]) == [7, 7, 2]
    assert candidate([[6, 5, 2]]) == [6, 5, 2]
    assert candidate([[3, 1, 4]]) == [3, 1, 4]
    assert candidate([[6, 4, 2]]) == [6, 4, 2]
    assert candidate([[1, 3, 1]]) == [1, 3, 1]
    assert candidate([[2, 7, 2]]) == [2, 7, 2]
    assert candidate([[7, 1, 6]]) == [7, 1, 6]
    assert candidate([[2, 3, 5]]) == [2, 3, 5]
    assert candidate([[1, 2, 1]]) == [1, 2, 1]
    assert candidate([[3, 7, 4]]) == [3, 7, 4]
    assert candidate([[2, 3, 2]]) == [2, 3, 2]
    assert candidate([[5, 5, 5]]) == [5, 5, 5]
    assert candidate([[1, 6, 2]]) == [1, 6, 2]
    assert candidate([[4, 5, 6]]) == [4, 5, 6]
    assert candidate([[3, 4, 1]]) == [3, 4, 1]
    assert candidate([[5, 1, 6]]) == [5, 1, 6]
    assert candidate([[1, 4, 3]]) == [1, 4, 3]
    assert candidate([[6, 3, 2]]) == [6, 3, 2]
    assert candidate([[4, 2, 1]]) == [4, 2, 1]
    assert candidate([[4, 7, 6]]) == [4, 7, 6]
    assert candidate([[4, 4, 4]]) == [4, 4, 4]
    assert candidate([[3, 7, 1]]) == [3, 7, 1]
    assert candidate([[4, 5, 4]]) == [4, 5, 4]
    assert candidate([[2, 6, 4]]) == [2, 6, 4]
    assert candidate([[2, 3, 6]]) == [2, 3, 6]
    assert candidate([[1, 4, 6]]) == [1, 4, 6]
    assert candidate([[6, 5, 6]]) == [6, 5, 6]
    assert candidate([[4, 8, 3]]) == [4, 8, 3]
    assert candidate([[6, 4, 1]]) == [6, 4, 1]
    assert candidate([[5, 1, 6]]) == [5, 1, 6]
    assert candidate([[5, 5, 1]]) == [5, 5, 1]
    assert candidate([[1, 1, 1]]) == [1, 1, 1]

if __name__ == '__main__':
    check(max_sum_list)