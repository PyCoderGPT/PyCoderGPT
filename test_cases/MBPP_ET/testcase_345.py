from case_MBPP_345 import maxAverageOfPath


def check(candidate):
    assert candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2
    assert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2
    assert candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 
    assert candidate([[6, 3, 1], [1, 4, 5], [2, 6, 6]], 3) == 5.0
    assert candidate([[5, 2, 3], [11, 3, 7], [3, 1, 10]], 3) == 7.2
    assert candidate([[5, 6, 2], [4, 8, 3], [2, 6, 9]], 2) == 6.333333333333333
    assert candidate([[5, 2, 6], [5, 6, 4], [9, 4, 14]], 3) == 7.4
    assert candidate([[3, 2, 2], [9, 5, 3], [9, 3, 11]], 1) == 3.0
    assert candidate([[4, 1, 2], [10, 10, 1], [5, 3, 4]], 3) == 6.2
    assert candidate([[1, 2, 6], [1, 3, 9], [4, 6, 14]], 1) == 1.0
    assert candidate([[5, 4, 8], [9, 9, 2], [12, 8, 14]], 2) == 7.666666666666667
    assert candidate([[2, 2, 4], [7, 9, 8], [8, 7, 11]], 1) == 2.0
    assert candidate([[1, 5, 4], [7, 3, 5], [2, 7, 4]], 1) == 1.0
    assert candidate([[3, 5, 1], [7, 9, 7], [7, 3, 9]], 1) == 3.0
    assert candidate([[6, 4, 4], [6, 2, 7], [9, 4, 6]], 1) == 6.0
    assert candidate([[3, 4, 8], [7, 3, 5], [3, 1, 4]], 2) == 4.333333333333333
    assert candidate([[5, 1, 6], [2, 4, 7], [9, 6, 12]], 3) == 6.8
    assert candidate([[5, 4, 6], [6, 3, 1], [9, 8, 8]], 1) == 5.0
    assert candidate([[4, 1, 2], [11, 4, 8], [12, 3, 13]], 3) == 8.6
    assert candidate([[4, 2, 6], [3, 9, 2], [9, 5, 10]], 3) == 6.2
    assert candidate([[2, 3, 5], [11, 4, 4], [5, 2, 11]], 1) == 2.0
    assert candidate([[3, 7, 3], [10, 10, 7], [3, 1, 5]], 2) == 7.666666666666667
    assert candidate([[4, 7, 5], [9, 1, 4], [6, 1, 5]], 2) == 4.666666666666667
    assert candidate([[4, 1, 6], [10, 4, 9], [8, 2, 11]], 1) == 4.0
    assert candidate([[1, 2, 4], [3, 3, 9], [4, 3, 5]], 1) == 1.0
    assert candidate([[4, 3, 8], [9, 9, 7], [4, 1, 8]], 3) == 7.4
    assert candidate([[5, 6, 5], [3, 5, 4], [10, 1, 6]], 2) == 5.333333333333333
    assert candidate([[2, 2, 7], [3, 8, 9], [12, 6, 9]], 3) == 6.4
    assert candidate([[1, 5, 2], [6, 5, 8], [11, 1, 12]], 1) == 1.0
    assert candidate([[2, 5, 2], [6, 1, 2], [2, 3, 7]], 2) == 3.0
    assert candidate([[1, 2, 1], [3, 1, 8], [11, 1, 6]], 3) == 4.4
    assert candidate([[4, 2, 6], [2, 5, 2], [3, 3, 7]], 2) == 3.6666666666666665
    assert candidate([[2, 3, 5], [9, 8, 6], [12, 5, 4]], 1) == 2.0
    assert candidate([[1, 3, 6], [7, 6, 8], [7, 4, 8]], 2) == 4.666666666666667
    assert candidate([[4, 3, 1], [9, 6, 3], [6, 8, 13]], 3) == 8.0
    assert candidate([[6, 6, 7], [5, 8, 5], [5, 6, 12]], 2) == 6.666666666666667
    assert candidate([[1, 4, 7], [11, 8, 10], [7, 2, 15]], 3) == 9.0
    assert candidate([[5, 3, 7], [4, 8, 2], [8, 5, 9]], 2) == 5.666666666666667
    assert candidate([[5, 6, 9], [3, 1, 6], [5, 8, 12]], 1) == 5.0
    assert candidate([[2, 1, 3], [9, 10, 6], [12, 3, 14]], 3) == 8.2
    assert candidate([[5, 6, 5], [9, 9, 10], [3, 2, 13]], 2) == 7.666666666666667
    assert candidate([[7, 7, 9], [9, 1, 4], [12, 2, 15]], 3) == 9.0
    assert candidate([[7, 3, 8], [3, 1, 4], [9, 2, 15]], 2) == 3.6666666666666665
    assert candidate([[7, 1, 9], [4, 11, 4], [3, 4, 9]], 2) == 7.333333333333333
    assert candidate([[5, 7, 1], [2, 1, 4], [12, 6, 9]], 2) == 4.333333333333333
    assert candidate([[3, 1, 5], [5, 4, 7], [11, 3, 13]], 3) == 7.0
    assert candidate([[3, 8, 9], [12, 8, 5], [5, 2, 9]], 1) == 3.0
    assert candidate([[4, 5, 1], [5, 5, 7], [13, 8, 14]], 1) == 4.0
    assert candidate([[6, 4, 3], [9, 7, 8], [11, 6, 6]], 3) == 7.6
    assert candidate([[4, 4, 7], [11, 1, 1], [5, 9, 12]], 2) == 5.333333333333333
    assert candidate([[1, 1, 9], [2, 8, 10], [5, 9, 6]], 2) == 3.6666666666666665
    assert candidate([[7, 1, 6], [12, 2, 5], [4, 6, 11]], 3) == 8.0
    assert candidate([[5, 6, 9], [4, 6, 3], [10, 1, 13]], 1) == 5.0
    assert candidate([[4, 5, 2], [6, 1, 1], [10, 4, 8]], 1) == 4.0
    assert candidate([[4, 2, 4], [10, 6, 6], [13, 3, 12]], 1) == 4.0
    assert candidate([[3, 8, 1], [2, 2, 6], [3, 8, 5]], 2) == 4.333333333333333
    assert candidate([[4, 6, 7], [9, 1, 6], [13, 1, 5]], 2) == 4.666666666666667
    assert candidate([[5, 6, 4], [7, 4, 9], [6, 6, 10]], 1) == 5.0
    assert candidate([[7, 7, 8], [9, 7, 2], [11, 3, 6]], 1) == 7.0
    assert candidate([[5, 4, 4], [2, 1, 8], [12, 7, 12]], 2) == 3.3333333333333335
    assert candidate([[3, 2, 3], [12, 6, 3], [13, 1, 11]], 3) == 8.0
    assert candidate([[4, 2, 5], [2, 3, 4], [5, 6, 12]], 2) == 3.0
    assert candidate([[7, 1, 7], [4, 8, 2], [5, 2, 12]], 3) == 6.6
    assert candidate([[1, 6, 5], [7, 7, 2], [11, 4, 13]], 3) == 7.2
    assert candidate([[3, 6, 1], [10, 1, 3], [3, 8, 12]], 2) == 4.666666666666667
    assert candidate([[4, 1, 2], [12, 4, 6], [13, 2, 14]], 3) == 9.0
    assert candidate([[2, 6, 7], [3, 7, 9], [9, 8, 7]], 3) == 6.2
    assert candidate([[5, 1, 1], [4, 7, 3], [6, 7, 9]], 2) == 5.333333333333333
    assert candidate([[3, 4, 3], [6, 4, 4], [7, 3, 14]], 2) == 4.333333333333333
    assert candidate([[2, 2, 9], [12, 2, 9], [4, 7, 7]], 1) == 2.0
    assert candidate([[4, 7, 2], [5, 4, 7], [9, 5, 10]], 2) == 5.0
    assert candidate([[2, 9, 1], [13, 5, 2], [4, 5, 11]], 2) == 6.666666666666667
    assert candidate([[6, 2, 1], [11, 12, 9], [4, 9, 14]], 2) == 9.666666666666666
    assert candidate([[3, 7, 10], [3, 9, 4], [11, 1, 7]], 3) == 6.2
    assert candidate([[6, 9, 5], [6, 7, 3], [6, 7, 10]], 1) == 6.0
    assert candidate([[4, 8, 3], [11, 10, 3], [11, 1, 12]], 1) == 4.0
    assert candidate([[6, 8, 9], [5, 11, 7], [9, 4, 10]], 2) == 8.333333333333334
    assert candidate([[4, 6, 8], [10, 7, 4], [10, 8, 14]], 2) == 7.0
    assert candidate([[8, 3, 3], [8, 4, 8], [12, 1, 14]], 1) == 8.0
    assert candidate([[8, 8, 10], [8, 12, 2], [14, 4, 9]], 3) == 8.6
    assert candidate([[4, 5, 4], [12, 7, 1], [12, 7, 11]], 3) == 9.2
    assert candidate([[8, 5, 10], [10, 10, 4], [11, 6, 8]], 1) == 8.0
    assert candidate([[7, 8, 8], [10, 7, 5], [6, 1, 9]], 2) == 8.0
    assert candidate([[1, 7, 4], [8, 7, 3], [11, 2, 8]], 2) == 5.333333333333333
    assert candidate([[1, 5, 6], [4, 2, 8], [6, 6, 10]], 2) == 2.6666666666666665
    assert candidate([[8, 8, 5], [3, 2, 5], [4, 3, 15]], 2) == 6.0
    assert candidate([[6, 8, 4], [9, 5, 11], [11, 8, 14]], 1) == 6.0
    assert candidate([[7, 9, 2], [13, 3, 2], [9, 10, 6]], 2) == 7.666666666666667
    assert candidate([[5, 7, 10], [8, 10, 11], [4, 3, 8]], 2) == 7.666666666666667
    assert candidate([[5, 6, 8], [12, 11, 4], [14, 6, 16]], 3) == 10.6
    assert candidate([[5, 2, 4], [12, 3, 9], [9, 7, 14]], 3) == 9.4
    assert candidate([[8, 7, 4], [4, 4, 7], [12, 5, 11]], 2) == 6.333333333333333
    assert candidate([[1, 8, 4], [11, 10, 8], [11, 1, 13]], 2) == 7.333333333333333
    assert candidate([[4, 9, 9], [5, 6, 11], [14, 8, 16]], 3) == 9.8
    assert candidate([[8, 8, 10], [11, 5, 9], [11, 5, 6]], 2) == 8.0
    assert candidate([[3, 1, 4], [6, 11, 7], [5, 8, 7]], 1) == 3.0
    assert candidate([[2, 6, 1], [11, 11, 3], [10, 3, 8]], 2) == 8.0
    assert candidate([[5, 8, 5], [9, 10, 3], [12, 5, 6]], 3) == 7.4
    assert candidate([[8, 4, 5], [4, 7, 9], [4, 2, 6]], 2) == 6.333333333333333
    assert candidate([[8, 7, 8], [9, 11, 1], [4, 7, 8]], 2) == 9.333333333333334
    assert candidate([[2, 7, 8], [6, 2, 9], [8, 8, 9]], 3) == 7.0
    assert candidate([[6, 5, 2], [13, 8, 8], [12, 2, 7]], 3) == 8.4

if __name__ == '__main__':
    check(maxAverageOfPath)