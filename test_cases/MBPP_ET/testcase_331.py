from case_MBPP_331 import Split


def check(candidate):
    assert candidate([1,2,3,4,5]) == [2,4]
    assert candidate([4,5,6,7,8,0,1]) == [4,6,8,0]
    assert candidate ([8,12,15,19]) == [8,12]
    assert candidate([2, 1, 1, 8, 7]) == [2, 8]
    assert candidate([6, 6, 3, 5, 2]) == [6, 6, 2]
    assert candidate([1, 4, 2, 9, 6]) == [4, 2, 6]
    assert candidate([6, 4, 1, 2, 5]) == [6, 4, 2]
    assert candidate([5, 2, 4, 7, 10]) == [2, 4, 10]
    assert candidate([6, 4, 2, 8, 4]) == [6, 4, 2, 8, 4]
    assert candidate([3, 2, 3, 4, 1]) == [2, 4]
    assert candidate([4, 1, 3, 4, 7]) == [4, 4]
    assert candidate([1, 7, 5, 1, 6]) == [6]
    assert candidate([1, 4, 6, 4, 3]) == [4, 6, 4]
    assert candidate([4, 1, 8, 7, 7]) == [4, 8]
    assert candidate([1, 5, 2, 7, 5]) == [2]
    assert candidate([6, 6, 1, 5, 8]) == [6, 6, 8]
    assert candidate([5, 4, 7, 6, 9]) == [4, 6]
    assert candidate([1, 7, 7, 3, 10]) == [10]
    assert candidate([2, 3, 4, 5, 4]) == [2, 4, 4]
    assert candidate([3, 3, 8, 6, 3]) == [8, 6]
    assert candidate([5, 4, 2, 8, 10]) == [4, 2, 8, 10]
    assert candidate([1, 6, 6, 8, 10]) == [6, 6, 8, 10]
    assert candidate([6, 5, 8, 5, 10]) == [6, 8, 10]
    assert candidate([6, 2, 6, 8, 5]) == [6, 2, 6, 8]
    assert candidate([5, 1, 5, 8, 3]) == [8]
    assert candidate([4, 7, 8, 5, 5]) == [4, 8]
    assert candidate([1, 3, 4, 5, 3]) == [4]
    assert candidate([3, 6, 7, 2, 2]) == [6, 2, 2]
    assert candidate([4, 6, 6, 6, 8]) == [4, 6, 6, 6, 8]
    assert candidate([4, 6, 4, 7, 6]) == [4, 6, 4, 6]
    assert candidate([2, 3, 3, 2, 7]) == [2, 2]
    assert candidate([4, 5, 8, 5, 2]) == [4, 8, 2]
    assert candidate([3, 6, 1, 1, 1]) == [6]
    assert candidate([5, 5, 3, 6, 6]) == [6, 6]
    assert candidate([1, 5, 2, 8, 1]) == [2, 8]
    assert candidate([1, 4, 5, 3, 2]) == [4, 2]
    assert candidate([2, 8, 3, 11, 3, 4, 2]) == [2, 8, 4, 2]
    assert candidate([6, 6, 2, 3, 11, 5, 6]) == [6, 6, 2, 6]
    assert candidate([6, 9, 2, 2, 7, 2, 1]) == [6, 2, 2, 2]
    assert candidate([9, 5, 8, 10, 6, 3, 5]) == [8, 10, 6]
    assert candidate([8, 9, 10, 3, 7, 4, 3]) == [8, 10, 4]
    assert candidate([5, 8, 10, 6, 10, 5, 2]) == [8, 10, 6, 10, 2]
    assert candidate([7, 6, 8, 8, 11, 2, 6]) == [6, 8, 8, 2, 6]
    assert candidate([6, 9, 10, 8, 13, 4, 6]) == [6, 10, 8, 4, 6]
    assert candidate([6, 4, 10, 9, 11, 5, 5]) == [6, 4, 10]
    assert candidate([1, 4, 8, 6, 13, 1, 3]) == [4, 8, 6]
    assert candidate([8, 9, 7, 4, 6, 5, 5]) == [8, 4, 6]
    assert candidate([1, 5, 5, 5, 6, 3, 1]) == [6]
    assert candidate([1, 3, 8, 12, 6, 4, 1]) == [8, 12, 6, 4]
    assert candidate([1, 9, 1, 2, 13, 1, 5]) == [2]
    assert candidate([2, 10, 2, 5, 9, 4, 4]) == [2, 10, 2, 4, 4]
    assert candidate([5, 9, 6, 7, 11, 1, 1]) == [6]
    assert candidate([7, 2, 9, 5, 12, 5, 4]) == [2, 12, 4]
    assert candidate([1, 8, 2, 8, 12, 5, 5]) == [8, 2, 8, 12]
    assert candidate([8, 4, 11, 12, 11, 2, 4]) == [8, 4, 12, 2, 4]
    assert candidate([9, 2, 8, 10, 5, 5, 2]) == [2, 8, 10, 2]
    assert candidate([6, 1, 2, 10, 3, 2, 3]) == [6, 2, 10, 2]
    assert candidate([5, 4, 2, 10, 10, 2, 2]) == [4, 2, 10, 10, 2, 2]
    assert candidate([9, 6, 11, 8, 11, 5, 4]) == [6, 8, 4]
    assert candidate([3, 1, 10, 6, 6, 3, 4]) == [10, 6, 6, 4]
    assert candidate([9, 3, 10, 4, 4, 2, 4]) == [10, 4, 4, 2, 4]
    assert candidate([6, 8, 1, 10, 4, 3, 5]) == [6, 8, 10, 4]
    assert candidate([4, 2, 11, 7, 10, 4, 1]) == [4, 2, 10, 4]
    assert candidate([6, 8, 1, 5, 5, 2, 4]) == [6, 8, 2, 4]
    assert candidate([2, 6, 9, 9, 5, 5, 4]) == [2, 6, 4]
    assert candidate([8, 5, 9, 10, 5, 2, 3]) == [8, 10, 2]
    assert candidate([9, 10, 4, 10, 11, 1, 6]) == [10, 4, 10, 6]
    assert candidate([4, 5, 3, 12, 7, 4, 1]) == [4, 12, 4]
    assert candidate([5, 8, 3, 4, 8, 5, 4]) == [8, 4, 8, 4]
    assert candidate([3, 17, 18, 15]) == [18]
    assert candidate([11, 17, 16, 17]) == [16]
    assert candidate([5, 14, 18, 24]) == [14, 18, 24]
    assert candidate([5, 13, 15, 23]) == []
    assert candidate([13, 14, 15, 16]) == [14, 16]
    assert candidate([13, 10, 19, 18]) == [10, 18]
    assert candidate([8, 10, 10, 14]) == [8, 10, 10, 14]
    assert candidate([4, 10, 12, 14]) == [4, 10, 12, 14]
    assert candidate([6, 15, 10, 23]) == [6, 10]
    assert candidate([9, 9, 12, 21]) == [12]
    assert candidate([9, 17, 12, 16]) == [12, 16]
    assert candidate([13, 9, 11, 21]) == []
    assert candidate([9, 10, 10, 23]) == [10, 10]
    assert candidate([7, 16, 13, 22]) == [16, 22]
    assert candidate([3, 7, 12, 20]) == [12, 20]
    assert candidate([3, 17, 13, 24]) == [24]
    assert candidate([9, 13, 16, 14]) == [16, 14]
    assert candidate([13, 17, 16, 20]) == [16, 20]
    assert candidate([10, 13, 19, 15]) == [10]
    assert candidate([3, 10, 18, 18]) == [10, 18, 18]
    assert candidate([13, 16, 11, 20]) == [16, 20]
    assert candidate([5, 12, 18, 17]) == [12, 18]
    assert candidate([11, 10, 11, 17]) == [10]
    assert candidate([5, 9, 20, 16]) == [20, 16]
    assert candidate([5, 13, 15, 16]) == [16]
    assert candidate([3, 8, 17, 18]) == [8, 18]
    assert candidate([5, 8, 12, 14]) == [8, 12, 14]
    assert candidate([9, 7, 16, 14]) == [16, 14]
    assert candidate([9, 16, 16, 23]) == [16, 16]
    assert candidate([8, 13, 19, 19]) == [8]
    assert candidate([9, 13, 14, 19]) == [14]
    assert candidate([13, 14, 15, 14]) == [14, 14]
    assert candidate([7, 15, 11, 19]) == []

if __name__ == '__main__':
    check(Split)