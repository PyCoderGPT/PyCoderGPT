from case_MBPP_382 import unique_Element


def check(candidate):
    assert candidate([1,1,1],3) == 'YES'
    assert candidate([1,2,1,2],4) == 'NO'
    assert candidate([1,2,3,4,5],5) == 'NO'
    assert candidate([5, 5, 4], 7) == "NO"
    assert candidate([4, 3, 1], 3) == "NO"
    assert candidate([5, 4, 2], 4) == "NO"
    assert candidate([5, 3, 3], 8) == "NO"
    assert candidate([1, 4, 3], 2) == "NO"
    assert candidate([6, 4, 2], 2) == "NO"
    assert candidate([3, 2, 2], 7) == "NO"
    assert candidate([1, 4, 3], 6) == "NO"
    assert candidate([6, 6, 3], 6) == "NO"
    assert candidate([4, 3, 4], 7) == "NO"
    assert candidate([3, 3, 1], 5) == "NO"
    assert candidate([4, 3, 4], 3) == "NO"
    assert candidate([2, 3, 3], 5) == "NO"
    assert candidate([6, 3, 6], 4) == "NO"
    assert candidate([2, 6, 6], 8) == "NO"
    assert candidate([6, 2, 5], 8) == "NO"
    assert candidate([4, 3, 2], 7) == "NO"
    assert candidate([2, 3, 4], 6) == "NO"
    assert candidate([6, 5, 1], 3) == "NO"
    assert candidate([2, 2, 2], 6) == "YES"
    assert candidate([3, 6, 2], 6) == "NO"
    assert candidate([5, 6, 1], 3) == "NO"
    assert candidate([5, 6, 2], 7) == "NO"
    assert candidate([6, 2, 4], 7) == "NO"
    assert candidate([6, 1, 4], 6) == "NO"
    assert candidate([1, 4, 6], 7) == "NO"
    assert candidate([1, 5, 2], 4) == "NO"
    assert candidate([3, 1, 3], 6) == "NO"
    assert candidate([5, 2, 1], 4) == "NO"
    assert candidate([6, 2, 1], 8) == "NO"
    assert candidate([2, 2, 2], 2) == "YES"
    assert candidate([6, 3, 5], 5) == "NO"
    assert candidate([4, 3, 2], 8) == "NO"
    assert candidate([3, 1, 4, 1], 8) == "NO"
    assert candidate([6, 2, 6, 6], 9) == "NO"
    assert candidate([3, 5, 1, 1], 3) == "NO"
    assert candidate([4, 3, 4, 5], 3) == "NO"
    assert candidate([2, 1, 5, 1], 6) == "NO"
    assert candidate([5, 4, 1, 7], 9) == "NO"
    assert candidate([4, 6, 1, 5], 2) == "NO"
    assert candidate([5, 4, 6, 6], 8) == "NO"
    assert candidate([4, 2, 4, 5], 5) == "NO"
    assert candidate([3, 4, 5, 3], 4) == "NO"
    assert candidate([2, 6, 2, 1], 5) == "NO"
    assert candidate([1, 5, 3, 5], 3) == "NO"
    assert candidate([4, 3, 3, 5], 4) == "NO"
    assert candidate([5, 1, 4, 4], 3) == "NO"
    assert candidate([1, 4, 6, 7], 2) == "NO"
    assert candidate([5, 7, 2, 7], 9) == "NO"
    assert candidate([4, 6, 3, 6], 4) == "NO"
    assert candidate([6, 7, 5, 7], 4) == "NO"
    assert candidate([5, 5, 2, 7], 8) == "NO"
    assert candidate([2, 6, 1, 5], 4) == "NO"
    assert candidate([5, 2, 3, 6], 9) == "NO"
    assert candidate([5, 3, 2, 6], 7) == "NO"
    assert candidate([2, 3, 1, 4], 1) == "NO"
    assert candidate([6, 3, 5, 6], 1) == "NO"
    assert candidate([2, 7, 5, 1], 8) == "NO"
    assert candidate([4, 1, 3, 5], 3) == "NO"
    assert candidate([1, 2, 6, 7], 3) == "NO"
    assert candidate([4, 5, 1, 4], 4) == "NO"
    assert candidate([2, 7, 5, 6], 7) == "NO"
    assert candidate([1, 5, 6, 3], 7) == "NO"
    assert candidate([2, 1, 5, 4], 8) == "NO"
    assert candidate([6, 2, 2, 3], 1) == "NO"
    assert candidate([5, 5, 4, 6], 7) == "NO"
    assert candidate([4, 3, 7, 9, 3], 8) == "NO"
    assert candidate([5, 7, 4, 1, 9], 8) == "NO"
    assert candidate([3, 6, 7, 9, 5], 1) == "NO"
    assert candidate([4, 5, 4, 5, 2], 7) == "NO"
    assert candidate([4, 5, 4, 6, 8], 6) == "NO"
    assert candidate([3, 7, 7, 8, 6], 5) == "NO"
    assert candidate([3, 3, 1, 5, 8], 4) == "NO"
    assert candidate([1, 2, 2, 2, 2], 2) == "NO"
    assert candidate([2, 3, 4, 9, 5], 4) == "NO"
    assert candidate([5, 3, 4, 2, 9], 10) == "NO"
    assert candidate([5, 4, 3, 9, 1], 2) == "NO"
    assert candidate([3, 3, 8, 6, 1], 8) == "NO"
    assert candidate([5, 6, 2, 8, 2], 5) == "NO"
    assert candidate([5, 7, 1, 6, 2], 2) == "NO"
    assert candidate([2, 3, 5, 4, 4], 10) == "NO"
    assert candidate([6, 2, 5, 9, 6], 7) == "NO"
    assert candidate([4, 6, 3, 7, 9], 10) == "NO"
    assert candidate([4, 5, 7, 6, 6], 10) == "NO"
    assert candidate([1, 5, 8, 8, 4], 5) == "NO"
    assert candidate([5, 7, 5, 6, 3], 4) == "NO"
    assert candidate([6, 2, 1, 1, 6], 8) == "NO"
    assert candidate([5, 3, 1, 2, 7], 4) == "NO"
    assert candidate([6, 7, 7, 3, 6], 1) == "NO"
    assert candidate([4, 1, 1, 4, 3], 3) == "NO"
    assert candidate([5, 5, 1, 7, 8], 10) == "NO"
    assert candidate([4, 3, 6, 1, 10], 2) == "NO"
    assert candidate([6, 6, 4, 6, 2], 8) == "NO"
    assert candidate([5, 4, 8, 1, 3], 9) == "NO"
    assert candidate([2, 2, 8, 5, 10], 7) == "NO"
    assert candidate([5, 6, 7, 9, 5], 10) == "NO"
    assert candidate([3, 2, 3, 2, 4], 1) == "NO"
    assert candidate([3, 6, 7, 8, 1], 3) == "NO"
    assert candidate([1, 7, 5, 2, 3], 8) == "NO"

if __name__ == '__main__':
    check(unique_Element)