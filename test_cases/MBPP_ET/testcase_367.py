from case_MBPP_367 import divisible_by_digits


def check(candidate):
    assert candidate(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
    assert candidate(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(20,25)==[22, 24]
    assert candidate(6, 20) == [6, 7, 8, 9, 11, 12, 15]
    assert candidate(3, 22) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
    assert candidate(5, 27) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]
    assert candidate(6, 21) == [6, 7, 8, 9, 11, 12, 15]
    assert candidate(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(1, 25) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]
    assert candidate(3, 23) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
    assert candidate(4, 25) == [4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]
    assert candidate(2, 25) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]
    assert candidate(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]
    assert candidate(2, 24) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]
    assert candidate(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(6, 24) == [6, 7, 8, 9, 11, 12, 15, 22, 24]
    assert candidate(6, 19) == [6, 7, 8, 9, 11, 12, 15]
    assert candidate(2, 18) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(5, 26) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]
    assert candidate(3, 25) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]
    assert candidate(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]
    assert candidate(5, 25) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]
    assert candidate(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(4, 19) == [4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(6, 26) == [6, 7, 8, 9, 11, 12, 15, 22, 24]
    assert candidate(3, 26) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]
    assert candidate(6, 23) == [6, 7, 8, 9, 11, 12, 15, 22]
    assert candidate(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(3, 21) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]
    assert candidate(2, 26) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]
    assert candidate(5, 22) == [5, 6, 7, 8, 9, 11, 12, 15, 22]
    assert candidate(1, 27) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]
    assert candidate(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(4, 10) == [4, 5, 6, 7, 8, 9]
    assert candidate(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(4, 11) == [4, 5, 6, 7, 8, 9, 11]
    assert candidate(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(3, 15) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(4, 17) == [4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]
    assert candidate(1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]
    assert candidate(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(6, 17) == [6, 7, 8, 9, 11, 12, 15]
    assert candidate(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(4, 15) == [4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(5, 12) == [5, 6, 7, 8, 9, 11, 12]
    assert candidate(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(5, 10) == [5, 6, 7, 8, 9]
    assert candidate(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(4, 13) == [4, 5, 6, 7, 8, 9, 11, 12]
    assert candidate(5, 17) == [5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(6, 16) == [6, 7, 8, 9, 11, 12, 15]
    assert candidate(4, 16) == [4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(3, 20) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(2, 17) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(6, 18) == [6, 7, 8, 9, 11, 12, 15]
    assert candidate(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(3, 18) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(24, 30) == [24]
    assert candidate(24, 30) == [24]
    assert candidate(17, 24) == [22, 24]
    assert candidate(23, 25) == [24]
    assert candidate(25, 29) == []
    assert candidate(25, 25) == []
    assert candidate(25, 27) == []
    assert candidate(18, 29) == [22, 24]
    assert candidate(25, 21) == []
    assert candidate(22, 28) == [22, 24]
    assert candidate(22, 25) == [22, 24]
    assert candidate(19, 26) == [22, 24]
    assert candidate(15, 28) == [15, 22, 24]
    assert candidate(20, 25) == [22, 24]
    assert candidate(25, 26) == []
    assert candidate(16, 20) == []
    assert candidate(23, 20) == []
    assert candidate(22, 23) == [22]
    assert candidate(23, 25) == [24]
    assert candidate(21, 23) == [22]
    assert candidate(19, 24) == [22, 24]
    assert candidate(20, 24) == [22, 24]
    assert candidate(17, 22) == [22]
    assert candidate(18, 26) == [22, 24]
    assert candidate(23, 30) == [24]
    assert candidate(25, 28) == []
    assert candidate(15, 29) == [15, 22, 24]
    assert candidate(20, 26) == [22, 24]
    assert candidate(16, 23) == [22]
    assert candidate(20, 21) == []
    assert candidate(18, 22) == [22]
    assert candidate(22, 22) == [22]
    assert candidate(21, 21) == []

if __name__ == '__main__':
    check(divisible_by_digits)