from case_MBPP_327 import swap_List


def check(candidate):
    assert candidate([1,2,3]) == [3,2,1]
    assert candidate([1,2,3,4,4]) == [4,2,3,4,1]
    assert candidate([4,5,6]) == [6,5,4]
    assert candidate([1, 2, 5]) == [5, 2, 1]
    assert candidate([1, 1, 6]) == [6, 1, 1]
    assert candidate([3, 2, 1]) == [1, 2, 3]
    assert candidate([2, 3, 6]) == [6, 3, 2]
    assert candidate([4, 6, 4]) == [4, 6, 4]
    assert candidate([4, 4, 8]) == [8, 4, 4]
    assert candidate([2, 7, 3]) == [3, 7, 2]
    assert candidate([2, 4, 1]) == [1, 4, 2]
    assert candidate([5, 4, 7]) == [7, 4, 5]
    assert candidate([6, 6, 6]) == [6, 6, 6]
    assert candidate([4, 7, 8]) == [8, 7, 4]
    assert candidate([4, 5, 3]) == [3, 5, 4]
    assert candidate([4, 3, 2]) == [2, 3, 4]
    assert candidate([5, 5, 2]) == [2, 5, 5]
    assert candidate([1, 3, 2]) == [2, 3, 1]
    assert candidate([2, 2, 8]) == [8, 2, 2]
    assert candidate([5, 4, 8]) == [8, 4, 5]
    assert candidate([6, 3, 4]) == [4, 3, 6]
    assert candidate([3, 2, 1]) == [1, 2, 3]
    assert candidate([3, 1, 3]) == [3, 1, 3]
    assert candidate([4, 6, 5]) == [5, 6, 4]
    assert candidate([6, 2, 5]) == [5, 2, 6]
    assert candidate([2, 4, 2]) == [2, 4, 2]
    assert candidate([4, 6, 8]) == [8, 6, 4]
    assert candidate([6, 3, 1]) == [1, 3, 6]
    assert candidate([3, 1, 8]) == [8, 1, 3]
    assert candidate([1, 7, 7]) == [7, 7, 1]
    assert candidate([4, 4, 6]) == [6, 4, 4]
    assert candidate([4, 3, 4]) == [4, 3, 4]
    assert candidate([2, 5, 2]) == [2, 5, 2]
    assert candidate([6, 6, 1]) == [1, 6, 6]
    assert candidate([2, 3, 7]) == [7, 3, 2]
    assert candidate([4, 7, 8]) == [8, 7, 4]
    assert candidate([6, 1, 8, 1, 3]) == [3, 1, 8, 1, 6]
    assert candidate([6, 6, 3, 9, 6]) == [6, 6, 3, 9, 6]
    assert candidate([6, 6, 4, 7, 2]) == [2, 6, 4, 7, 6]
    assert candidate([1, 4, 2, 6, 7]) == [7, 4, 2, 6, 1]
    assert candidate([6, 5, 7, 4, 6]) == [6, 5, 7, 4, 6]
    assert candidate([3, 2, 8, 3, 6]) == [6, 2, 8, 3, 3]
    assert candidate([1, 5, 3, 7, 6]) == [6, 5, 3, 7, 1]
    assert candidate([5, 7, 6, 2, 7]) == [7, 7, 6, 2, 5]
    assert candidate([6, 2, 2, 3, 1]) == [1, 2, 2, 3, 6]
    assert candidate([4, 1, 8, 8, 9]) == [9, 1, 8, 8, 4]
    assert candidate([4, 6, 2, 6, 6]) == [6, 6, 2, 6, 4]
    assert candidate([2, 6, 5, 6, 2]) == [2, 6, 5, 6, 2]
    assert candidate([2, 1, 4, 2, 9]) == [9, 1, 4, 2, 2]
    assert candidate([6, 1, 7, 3, 4]) == [4, 1, 7, 3, 6]
    assert candidate([1, 5, 7, 8, 3]) == [3, 5, 7, 8, 1]
    assert candidate([3, 6, 4, 2, 3]) == [3, 6, 4, 2, 3]
    assert candidate([4, 6, 1, 7, 8]) == [8, 6, 1, 7, 4]
    assert candidate([4, 2, 1, 7, 5]) == [5, 2, 1, 7, 4]
    assert candidate([3, 4, 5, 9, 4]) == [4, 4, 5, 9, 3]
    assert candidate([2, 4, 3, 2, 2]) == [2, 4, 3, 2, 2]
    assert candidate([1, 7, 4, 8, 8]) == [8, 7, 4, 8, 1]
    assert candidate([6, 3, 3, 2, 3]) == [3, 3, 3, 2, 6]
    assert candidate([4, 3, 5, 6, 6]) == [6, 3, 5, 6, 4]
    assert candidate([6, 4, 4, 3, 5]) == [5, 4, 4, 3, 6]
    assert candidate([5, 5, 1, 2, 6]) == [6, 5, 1, 2, 5]
    assert candidate([5, 2, 4, 9, 2]) == [2, 2, 4, 9, 5]
    assert candidate([3, 5, 1, 2, 4]) == [4, 5, 1, 2, 3]
    assert candidate([4, 7, 6, 2, 4]) == [4, 7, 6, 2, 4]
    assert candidate([6, 3, 6, 9, 2]) == [2, 3, 6, 9, 6]
    assert candidate([4, 2, 3, 4, 1]) == [1, 2, 3, 4, 4]
    assert candidate([2, 6, 2, 5, 3]) == [3, 6, 2, 5, 2]
    assert candidate([5, 4, 2, 2, 8]) == [8, 4, 2, 2, 5]
    assert candidate([5, 5, 7, 5, 3]) == [3, 5, 7, 5, 5]
    assert candidate([6, 7, 4]) == [4, 7, 6]
    assert candidate([7, 5, 11]) == [11, 5, 7]
    assert candidate([5, 5, 7]) == [7, 5, 5]
    assert candidate([6, 8, 6]) == [6, 8, 6]
    assert candidate([9, 2, 10]) == [10, 2, 9]
    assert candidate([3, 9, 1]) == [1, 9, 3]
    assert candidate([2, 7, 7]) == [7, 7, 2]
    assert candidate([8, 6, 1]) == [1, 6, 8]
    assert candidate([9, 4, 6]) == [6, 4, 9]
    assert candidate([2, 9, 3]) == [3, 9, 2]
    assert candidate([4, 4, 8]) == [8, 4, 4]
    assert candidate([5, 5, 9]) == [9, 5, 5]
    assert candidate([4, 6, 7]) == [7, 6, 4]
    assert candidate([6, 8, 6]) == [6, 8, 6]
    assert candidate([6, 4, 5]) == [5, 4, 6]
    assert candidate([1, 5, 9]) == [9, 5, 1]
    assert candidate([1, 5, 1]) == [1, 5, 1]
    assert candidate([9, 1, 5]) == [5, 1, 9]
    assert candidate([8, 5, 9]) == [9, 5, 8]
    assert candidate([1, 10, 1]) == [1, 10, 1]
    assert candidate([9, 4, 8]) == [8, 4, 9]
    assert candidate([1, 9, 9]) == [9, 9, 1]
    assert candidate([2, 10, 5]) == [5, 10, 2]
    assert candidate([1, 1, 8]) == [8, 1, 1]
    assert candidate([1, 1, 9]) == [9, 1, 1]
    assert candidate([6, 6, 7]) == [7, 6, 6]
    assert candidate([7, 9, 6]) == [6, 9, 7]
    assert candidate([8, 5, 9]) == [9, 5, 8]
    assert candidate([8, 9, 11]) == [11, 9, 8]
    assert candidate([3, 1, 4]) == [4, 1, 3]
    assert candidate([5, 5, 4]) == [4, 5, 5]
    assert candidate([1, 3, 10]) == [10, 3, 1]
    assert candidate([6, 5, 8]) == [8, 5, 6]

if __name__ == '__main__':
    check(swap_List)