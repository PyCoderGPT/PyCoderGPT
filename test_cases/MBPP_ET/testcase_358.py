from case_MBPP_358 import left_insertion


def check(candidate):
    assert candidate([1,2,4,5],6)==4
    assert candidate([1,2,4,5],3)==2
    assert candidate([1,2,4,5],7)==4
    assert candidate([2, 1, 6, 10], 3) == 2
    assert candidate([1, 5, 2, 8], 5) == 3
    assert candidate([3, 2, 5, 7], 5) == 2
    assert candidate([3, 2, 8, 5], 6) == 2
    assert candidate([4, 5, 6, 5], 8) == 4
    assert candidate([3, 1, 8, 10], 4) == 2
    assert candidate([2, 4, 8, 6], 3) == 1
    assert candidate([5, 6, 1, 2], 2) == 3
    assert candidate([1, 1, 6, 2], 1) == 0
    assert candidate([6, 5, 8, 1], 10) == 4
    assert candidate([3, 2, 4, 7], 5) == 3
    assert candidate([5, 3, 5, 4], 1) == 0
    assert candidate([1, 5, 8, 8], 7) == 2
    assert candidate([4, 4, 9, 5], 8) == 2
    assert candidate([6, 6, 6, 10], 9) == 3
    assert candidate([5, 7, 4, 4], 7) == 4
    assert candidate([3, 3, 7, 2], 5) == 2
    assert candidate([6, 1, 8, 10], 6) == 2
    assert candidate([5, 4, 5, 8], 7) == 3
    assert candidate([3, 4, 7, 5], 11) == 4
    assert candidate([4, 7, 4, 2], 7) == 4
    assert candidate([4, 2, 5, 9], 5) == 2
    assert candidate([2, 3, 8, 6], 5) == 2
    assert candidate([3, 4, 5, 6], 8) == 4
    assert candidate([1, 2, 2, 9], 7) == 3
    assert candidate([4, 1, 1, 5], 8) == 4
    assert candidate([6, 7, 5, 3], 5) == 0
    assert candidate([1, 5, 2, 6], 8) == 4
    assert candidate([1, 5, 1, 6], 6) == 3
    assert candidate([5, 7, 7, 7], 8) == 4
    assert candidate([4, 2, 7, 10], 11) == 4
    assert candidate([1, 1, 8, 6], 2) == 2
    assert candidate([2, 4, 9, 7], 1) == 0
    assert candidate([3, 2, 4, 5], 4) == 2
    assert candidate([5, 2, 4, 1], 3) == 2
    assert candidate([3, 2, 7, 4], 5) == 2
    assert candidate([6, 2, 3, 2], 6) == 4
    assert candidate([6, 6, 2, 4], 6) == 4
    assert candidate([4, 6, 7, 2], 2) == 0
    assert candidate([1, 5, 9, 5], 6) == 2
    assert candidate([4, 6, 7, 6], 5) == 1
    assert candidate([6, 6, 8, 8], 8) == 2
    assert candidate([3, 6, 5, 10], 8) == 3
    assert candidate([1, 3, 2, 10], 5) == 3
    assert candidate([5, 5, 2, 3], 7) == 4
    assert candidate([1, 4, 2, 5], 2) == 1
    assert candidate([6, 5, 3, 1], 2) == 0
    assert candidate([5, 5, 4, 3], 7) == 4
    assert candidate([4, 3, 3, 10], 7) == 3
    assert candidate([4, 2, 2, 3], 7) == 4
    assert candidate([5, 3, 4, 9], 1) == 0
    assert candidate([5, 4, 7, 1], 3) == 0
    assert candidate([1, 7, 4, 6], 1) == 0
    assert candidate([3, 4, 6, 3], 7) == 4
    assert candidate([4, 3, 7, 5], 6) == 2
    assert candidate([1, 4, 7, 7], 2) == 1
    assert candidate([5, 5, 8, 5], 5) == 0
    assert candidate([1, 2, 6, 1], 7) == 4
    assert candidate([4, 7, 7, 4], 8) == 4
    assert candidate([6, 2, 9, 4], 6) == 2
    assert candidate([5, 2, 3, 6], 8) == 4
    assert candidate([3, 2, 1, 5], 2) == 3
    assert candidate([2, 5, 5, 4], 1) == 0
    assert candidate([1, 7, 5, 3], 6) == 4
    assert candidate([4, 5, 5, 6], 4) == 0
    assert candidate([4, 4, 7, 1], 3) == 0
    assert candidate([5, 5, 2, 2], 4) == 4
    assert candidate([3, 3, 6, 3], 8) == 4
    assert candidate([3, 5, 8, 6], 3) == 0
    assert candidate([5, 7, 9, 9], 8) == 2
    assert candidate([1, 1, 1, 6], 11) == 4
    assert candidate([3, 7, 2, 9], 2) == 0
    assert candidate([4, 4, 5, 9], 2) == 0
    assert candidate([6, 1, 4, 4], 3) == 2
    assert candidate([3, 2, 8, 3], 4) == 2
    assert candidate([2, 4, 3, 7], 8) == 4
    assert candidate([5, 3, 8, 4], 4) == 2
    assert candidate([5, 3, 7, 3], 9) == 4
    assert candidate([5, 3, 6, 4], 7) == 4
    assert candidate([4, 4, 4, 1], 10) == 4
    assert candidate([4, 7, 3, 6], 9) == 4
    assert candidate([2, 4, 3, 9], 6) == 3
    assert candidate([5, 6, 4, 6], 4) == 0
    assert candidate([6, 2, 3, 7], 5) == 3
    assert candidate([2, 1, 5, 3], 3) == 2
    assert candidate([4, 1, 3, 4], 11) == 4
    assert candidate([6, 5, 1, 5], 6) == 4
    assert candidate([1, 5, 1, 7], 6) == 3
    assert candidate([1, 7, 6, 2], 11) == 4
    assert candidate([5, 5, 5, 6], 12) == 4
    assert candidate([4, 6, 8, 3], 10) == 4
    assert candidate([3, 4, 5, 4], 8) == 4
    assert candidate([6, 6, 3, 6], 6) == 3
    assert candidate([4, 5, 5, 10], 2) == 0
    assert candidate([1, 3, 1, 4], 9) == 4
    assert candidate([5, 7, 4, 3], 11) == 4
    assert candidate([2, 3, 1, 5], 10) == 4
    assert candidate([3, 4, 9, 7], 2) == 0
    assert candidate([3, 3, 2, 2], 8) == 4

if __name__ == '__main__':
    check(left_insertion)