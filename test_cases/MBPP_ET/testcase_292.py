from case_MBPP_292 import split_Arr


def check(candidate):
    assert candidate([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]
    assert candidate([1,2,3,4],4,1) == [2,3,4,1]
    assert candidate([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]
    assert candidate([14, 7, 10, 2, 49, 39], 4, 4) == [49, 39, 14, 7, 10, 2]
    assert candidate([9, 13, 9, 7, 51, 33], 6, 7) == [9, 13, 9, 7, 51, 33]
    assert candidate([10, 14, 6, 5, 48, 34], 5, 2) == [6, 5, 48, 34, 10, 14]
    assert candidate([15, 6, 6, 5, 51, 31], 6, 1) == [6, 6, 5, 51, 31, 15]
    assert candidate([13, 11, 5, 6, 50, 40], 4, 6) == [13, 11, 5, 6, 50, 40]
    assert candidate([14, 10, 8, 3, 51, 40], 11, 2) == [8, 3, 51, 40, 14, 10]
    assert candidate([17, 10, 1, 2, 55, 33], 7, 7) == [17, 10, 1, 2, 55, 33]
    assert candidate([15, 14, 1, 11, 51, 38], 4, 5) == [38, 15, 14, 1, 11, 51]
    assert candidate([13, 10, 3, 6, 49, 40], 11, 2) == [3, 6, 49, 40, 13, 10]
    assert candidate([13, 15, 4, 5, 56, 40], 6, 4) == [56, 40, 13, 15, 4, 5]
    assert candidate([12, 6, 2, 1, 49, 35], 9, 3) == [1, 49, 35, 12, 6, 2]
    assert candidate([12, 9, 7, 1, 55, 38], 9, 5) == [38, 12, 9, 7, 1, 55]
    assert candidate([13, 8, 3, 6, 57, 37], 10, 7) == [13, 8, 3, 6, 57, 37]
    assert candidate([11, 6, 8, 3, 47, 31], 5, 5) == [31, 11, 6, 8, 3, 47]
    assert candidate([14, 8, 10, 4, 56, 35], 10, 1) == [8, 10, 4, 56, 35, 14]
    assert candidate([10, 9, 7, 4, 52, 32], 7, 3) == [4, 52, 32, 10, 9, 7]
    assert candidate([13, 9, 2, 5, 48, 38], 6, 6) == [13, 9, 2, 5, 48, 38]
    assert candidate([9, 15, 4, 5, 53, 31], 5, 7) == [9, 15, 4, 5, 53, 31]
    assert candidate([12, 8, 9, 9, 48, 37], 5, 6) == [12, 8, 9, 9, 48, 37]
    assert candidate([14, 12, 8, 7, 47, 31], 10, 3) == [7, 47, 31, 14, 12, 8]
    assert candidate([7, 10, 6, 4, 47, 34], 9, 7) == [7, 10, 6, 4, 47, 34]
    assert candidate([14, 15, 7, 7, 49, 35], 8, 2) == [7, 7, 49, 35, 14, 15]
    assert candidate([13, 11, 5, 11, 50, 36], 9, 5) == [36, 13, 11, 5, 11, 50]
    assert candidate([15, 5, 6, 9, 51, 32], 3, 1) == [5, 6, 9, 51, 32, 15]
    assert candidate([16, 15, 6, 7, 48, 41], 3, 6) == [16, 15, 6, 7, 48, 41]
    assert candidate([14, 7, 10, 9, 56, 31], 8, 3) == [9, 56, 31, 14, 7, 10]
    assert candidate([16, 12, 3, 9, 49, 36], 2, 2) == [3, 9, 49, 36, 16, 12]
    assert candidate([10, 13, 3, 5, 56, 38], 7, 3) == [5, 56, 38, 10, 13, 3]
    assert candidate([13, 15, 7, 9, 52, 35], 7, 5) == [35, 13, 15, 7, 9, 52]
    assert candidate([17, 14, 3, 3, 55, 34], 6, 3) == [3, 55, 34, 17, 14, 3]
    assert candidate([9, 9, 9, 10, 49, 36], 4, 3) == [10, 49, 36, 9, 9, 9]
    assert candidate([14, 15, 1, 5, 51, 33], 10, 5) == [33, 14, 15, 1, 5, 51]
    assert candidate([14, 6, 6, 10, 49, 39], 10, 5) == [39, 14, 6, 6, 10, 49]
    assert candidate([5, 3, 4, 6], 1, 1) == [3, 4, 6, 5]
    assert candidate([6, 6, 6, 4], 4, 4) == [6, 6, 6, 4]
    assert candidate([3, 1, 7, 2], 5, 6) == [3, 1, 7, 2]
    assert candidate([1, 6, 7, 5], 2, 5) == [1, 6, 7, 5]
    assert candidate([1, 3, 5, 3], 9, 6) == [1, 3, 5, 3]
    assert candidate([2, 4, 7, 9], 9, 3) == [9, 2, 4, 7]
    assert candidate([1, 4, 1, 4], 1, 4) == [1, 4, 1, 4]
    assert candidate([6, 7, 1, 5], 6, 2) == [1, 5, 6, 7]
    assert candidate([3, 1, 4, 3], 9, 3) == [3, 3, 1, 4]
    assert candidate([1, 6, 6, 6], 1, 2) == [6, 6, 1, 6]
    assert candidate([5, 3, 2, 6], 5, 1) == [3, 2, 6, 5]
    assert candidate([3, 2, 1, 3], 2, 1) == [2, 1, 3, 3]
    assert candidate([1, 3, 8, 2], 2, 2) == [8, 2, 1, 3]
    assert candidate([5, 6, 1, 6], 2, 5) == [5, 6, 1, 6]
    assert candidate([6, 6, 1, 8], 3, 4) == [6, 6, 1, 8]
    assert candidate([2, 4, 5, 3], 4, 3) == [3, 2, 4, 5]
    assert candidate([3, 2, 6, 2], 8, 4) == [3, 2, 6, 2]
    assert candidate([2, 4, 8, 9], 4, 3) == [9, 2, 4, 8]
    assert candidate([2, 3, 5, 6], 8, 1) == [3, 5, 6, 2]
    assert candidate([4, 4, 8, 5], 9, 5) == [4, 4, 8, 5]
    assert candidate([3, 4, 5, 9], 4, 5) == [3, 4, 5, 9]
    assert candidate([1, 4, 3, 2], 5, 3) == [2, 1, 4, 3]
    assert candidate([4, 5, 1, 7], 3, 4) == [4, 5, 1, 7]
    assert candidate([3, 1, 1, 3], 1, 5) == [3, 1, 1, 3]
    assert candidate([1, 7, 1, 2], 1, 5) == [1, 7, 1, 2]
    assert candidate([5, 4, 6, 4], 6, 6) == [5, 4, 6, 4]
    assert candidate([4, 3, 1, 6], 2, 6) == [4, 3, 1, 6]
    assert candidate([2, 6, 8, 9], 4, 5) == [2, 6, 8, 9]
    assert candidate([1, 6, 4, 7], 6, 3) == [7, 1, 6, 4]
    assert candidate([4, 5, 2, 8], 2, 4) == [4, 5, 2, 8]
    assert candidate([6, 6, 1, 1], 3, 2) == [1, 1, 6, 6]
    assert candidate([5, 7, 7, 8], 5, 4) == [5, 7, 7, 8]
    assert candidate([4, 5, 8, 1], 2, 5) == [4, 5, 8, 1]
    assert candidate([1, 5, 4, 5, 3, 5, 2, 2], 9, 1) == [5, 4, 5, 3, 5, 2, 2, 1]
    assert candidate([5, 5, 1, 3, 1, 9, 7, 6], 3, 1) == [5, 1, 3, 1, 9, 7, 6, 5]
    assert candidate([2, 3, 7, 6, 7, 10, 7, 8], 4, 5) == [10, 7, 8, 2, 3, 7, 6, 7]
    assert candidate([5, 6, 5, 7, 6, 5, 1, 11], 10, 3) == [7, 6, 5, 1, 11, 5, 6, 5]
    assert candidate([4, 1, 7, 2, 6, 4, 6, 7], 13, 7) == [7, 4, 1, 7, 2, 6, 4, 6]
    assert candidate([2, 3, 3, 5, 4, 2, 6, 7], 10, 3) == [5, 4, 2, 6, 7, 2, 3, 3]
    assert candidate([2, 4, 1, 5, 3, 10, 1, 11], 5, 5) == [10, 1, 11, 2, 4, 1, 5, 3]
    assert candidate([5, 4, 6, 7, 4, 7, 1, 3], 8, 3) == [7, 4, 7, 1, 3, 5, 4, 6]
    assert candidate([3, 5, 6, 3, 9, 5, 9, 4], 9, 2) == [6, 3, 9, 5, 9, 4, 3, 5]
    assert candidate([1, 3, 6, 7, 2, 6, 3, 7], 9, 6) == [3, 7, 1, 3, 6, 7, 2, 6]
    assert candidate([1, 2, 5, 8, 6, 5, 2, 3], 3, 7) == [3, 1, 2, 5, 8, 6, 5, 2]
    assert candidate([5, 4, 6, 3, 7, 6, 7, 2], 10, 5) == [6, 7, 2, 5, 4, 6, 3, 7]
    assert candidate([3, 5, 5, 4, 8, 6, 2, 4], 11, 7) == [4, 3, 5, 5, 4, 8, 6, 2]
    assert candidate([3, 5, 1, 7, 8, 7, 6, 2], 6, 2) == [1, 7, 8, 7, 6, 2, 3, 5]
    assert candidate([4, 4, 4, 1, 8, 8, 3, 10], 3, 3) == [1, 8, 8, 3, 10, 4, 4, 4]
    assert candidate([3, 3, 6, 5, 1, 4, 11, 9], 12, 6) == [11, 9, 3, 3, 6, 5, 1, 4]
    assert candidate([4, 3, 5, 3, 9, 2, 2, 5], 10, 5) == [2, 2, 5, 4, 3, 5, 3, 9]
    assert candidate([4, 3, 2, 8, 1, 8, 1, 9], 12, 3) == [8, 1, 8, 1, 9, 4, 3, 2]
    assert candidate([5, 1, 2, 3, 7, 2, 2, 4], 8, 8) == [5, 1, 2, 3, 7, 2, 2, 4]
    assert candidate([1, 2, 6, 7, 2, 6, 10, 2], 7, 2) == [6, 7, 2, 6, 10, 2, 1, 2]
    assert candidate([3, 3, 5, 6, 5, 2, 1, 2], 10, 3) == [6, 5, 2, 1, 2, 3, 3, 5]
    assert candidate([2, 1, 3, 4, 2, 7, 6, 3], 13, 3) == [4, 2, 7, 6, 3, 2, 1, 3]
    assert candidate([5, 6, 2, 8, 7, 1, 11, 4], 3, 3) == [8, 7, 1, 11, 4, 5, 6, 2]
    assert candidate([5, 3, 1, 2, 4, 8, 7, 6], 3, 3) == [2, 4, 8, 7, 6, 5, 3, 1]
    assert candidate([5, 4, 2, 3, 3, 1, 11, 9], 8, 7) == [9, 5, 4, 2, 3, 3, 1, 11]
    assert candidate([1, 5, 5, 3, 4, 2, 3, 2], 12, 8) == [1, 5, 5, 3, 4, 2, 3, 2]
    assert candidate([4, 3, 4, 1, 3, 8, 2, 7], 8, 5) == [8, 2, 7, 4, 3, 4, 1, 3]
    assert candidate([4, 3, 4, 1, 8, 4, 8, 4], 8, 8) == [4, 3, 4, 1, 8, 4, 8, 4]
    assert candidate([5, 2, 4, 4, 8, 1, 11, 10], 9, 6) == [11, 10, 5, 2, 4, 4, 8, 1]
    assert candidate([1, 3, 2, 4, 4, 1, 9, 2], 10, 1) == [3, 2, 4, 4, 1, 9, 2, 1]
    assert candidate([3, 6, 7, 6, 6, 7, 5, 7], 10, 7) == [7, 3, 6, 7, 6, 6, 7, 5]
    assert candidate([2, 1, 4, 1, 4, 4, 1, 8], 13, 7) == [8, 2, 1, 4, 1, 4, 4, 1]
    assert candidate([1, 1, 7, 8, 6, 7, 1, 4], 8, 2) == [7, 8, 6, 7, 1, 4, 1, 1]

if __name__ == '__main__':
    check(split_Arr)