from case_MBPP_295 import perfect_squares


def check(candidate):
    assert candidate(1,30)==[1, 4, 9, 16, 25]
    assert candidate(50,100)==[64, 81, 100]
    assert candidate(100,200)==[100, 121, 144, 169, 196]
    assert candidate(3, 26) == [4, 9, 16, 25]
    assert candidate(1, 27) == [1, 4, 9, 16, 25]
    assert candidate(3, 30) == [4, 9, 16, 25]
    assert candidate(6, 33) == [9, 16, 25]
    assert candidate(6, 34) == [9, 16, 25]
    assert candidate(1, 35) == [1, 4, 9, 16, 25]
    assert candidate(2, 28) == [4, 9, 16, 25]
    assert candidate(4, 32) == [4, 9, 16, 25]
    assert candidate(2, 34) == [4, 9, 16, 25]
    assert candidate(6, 31) == [9, 16, 25]
    assert candidate(3, 28) == [4, 9, 16, 25]
    assert candidate(2, 30) == [4, 9, 16, 25]
    assert candidate(1, 28) == [1, 4, 9, 16, 25]
    assert candidate(2, 28) == [4, 9, 16, 25]
    assert candidate(2, 31) == [4, 9, 16, 25]
    assert candidate(6, 27) == [9, 16, 25]
    assert candidate(2, 31) == [4, 9, 16, 25]
    assert candidate(4, 31) == [4, 9, 16, 25]
    assert candidate(2, 28) == [4, 9, 16, 25]
    assert candidate(2, 34) == [4, 9, 16, 25]
    assert candidate(4, 31) == [4, 9, 16, 25]
    assert candidate(5, 35) == [9, 16, 25]
    assert candidate(3, 30) == [4, 9, 16, 25]
    assert candidate(4, 28) == [4, 9, 16, 25]
    assert candidate(2, 28) == [4, 9, 16, 25]
    assert candidate(6, 26) == [9, 16, 25]
    assert candidate(3, 26) == [4, 9, 16, 25]
    assert candidate(2, 26) == [4, 9, 16, 25]
    assert candidate(3, 29) == [4, 9, 16, 25]
    assert candidate(2, 32) == [4, 9, 16, 25]
    assert candidate(2, 27) == [4, 9, 16, 25]
    assert candidate(1, 26) == [1, 4, 9, 16, 25]
    assert candidate(2, 34) == [4, 9, 16, 25]
    assert candidate(46, 99) == [49, 64, 81]
    assert candidate(45, 102) == [49, 64, 81, 100]
    assert candidate(49, 97) == [49, 64, 81]
    assert candidate(48, 100) == [49, 64, 81, 100]
    assert candidate(50, 98) == [64, 81]
    assert candidate(55, 104) == [64, 81, 100]
    assert candidate(48, 104) == [49, 64, 81, 100]
    assert candidate(51, 103) == [64, 81, 100]
    assert candidate(45, 105) == [49, 64, 81, 100]
    assert candidate(45, 96) == [49, 64, 81]
    assert candidate(54, 99) == [64, 81]
    assert candidate(53, 100) == [64, 81, 100]
    assert candidate(51, 101) == [64, 81, 100]
    assert candidate(53, 102) == [64, 81, 100]
    assert candidate(45, 99) == [49, 64, 81]
    assert candidate(51, 95) == [64, 81]
    assert candidate(48, 103) == [49, 64, 81, 100]
    assert candidate(53, 97) == [64, 81]
    assert candidate(55, 97) == [64, 81]
    assert candidate(45, 105) == [49, 64, 81, 100]
    assert candidate(49, 98) == [49, 64, 81]
    assert candidate(51, 98) == [64, 81]
    assert candidate(45, 101) == [49, 64, 81, 100]
    assert candidate(45, 100) == [49, 64, 81, 100]
    assert candidate(45, 104) == [49, 64, 81, 100]
    assert candidate(45, 105) == [49, 64, 81, 100]
    assert candidate(47, 98) == [49, 64, 81]
    assert candidate(50, 98) == [64, 81]
    assert candidate(48, 95) == [49, 64, 81]
    assert candidate(51, 98) == [64, 81]
    assert candidate(47, 96) == [49, 64, 81]
    assert candidate(51, 100) == [64, 81, 100]
    assert candidate(55, 104) == [64, 81, 100]
    assert candidate(95, 195) == [100, 121, 144, 169]
    assert candidate(99, 203) == [100, 121, 144, 169, 196]
    assert candidate(103, 199) == [121, 144, 169, 196]
    assert candidate(101, 199) == [121, 144, 169, 196]
    assert candidate(102, 197) == [121, 144, 169, 196]
    assert candidate(103, 204) == [121, 144, 169, 196]
    assert candidate(104, 198) == [121, 144, 169, 196]
    assert candidate(104, 196) == [121, 144, 169, 196]
    assert candidate(105, 202) == [121, 144, 169, 196]
    assert candidate(105, 195) == [121, 144, 169]
    assert candidate(99, 202) == [100, 121, 144, 169, 196]
    assert candidate(104, 202) == [121, 144, 169, 196]
    assert candidate(105, 203) == [121, 144, 169, 196]
    assert candidate(105, 204) == [121, 144, 169, 196]
    assert candidate(99, 201) == [100, 121, 144, 169, 196]
    assert candidate(103, 195) == [121, 144, 169]
    assert candidate(100, 200) == [100, 121, 144, 169, 196]
    assert candidate(102, 203) == [121, 144, 169, 196]
    assert candidate(105, 197) == [121, 144, 169, 196]
    assert candidate(105, 196) == [121, 144, 169, 196]
    assert candidate(96, 204) == [100, 121, 144, 169, 196]
    assert candidate(97, 203) == [100, 121, 144, 169, 196]
    assert candidate(103, 202) == [121, 144, 169, 196]
    assert candidate(105, 203) == [121, 144, 169, 196]
    assert candidate(100, 197) == [100, 121, 144, 169, 196]
    assert candidate(95, 198) == [100, 121, 144, 169, 196]
    assert candidate(100, 203) == [100, 121, 144, 169, 196]
    assert candidate(103, 202) == [121, 144, 169, 196]
    assert candidate(103, 197) == [121, 144, 169, 196]
    assert candidate(103, 197) == [121, 144, 169, 196]
    assert candidate(97, 198) == [100, 121, 144, 169, 196]
    assert candidate(100, 198) == [100, 121, 144, 169, 196]
    assert candidate(97, 196) == [100, 121, 144, 169, 196]

if __name__ == '__main__':
    check(perfect_squares)