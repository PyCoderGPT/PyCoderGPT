from case_MBPP_125 import intersection_array


def check(candidate):
    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]
    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]
    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]
    assert candidate([5, 3, 6, 2, 8, 9, 9, 13], [5, 4, 8, 9, 6]) == [5, 8, 9, 6]
    assert candidate([3, 6, 1, 8, 11, 10, 13, 15], [3, 4, 9, 4, 14]) == [3]
    assert candidate([2, 3, 7, 7, 10, 3, 5, 14], [6, 4, 7, 5, 10]) == [7, 5, 10]
    assert candidate([1, 4, 2, 3, 5, 3, 9, 15], [2, 1, 6, 10, 12]) == [2, 1]
    assert candidate([1, 3, 5, 3, 7, 7, 14, 13], [1, 1, 8, 11, 11]) == [1, 1]
    assert candidate([1, 5, 1, 7, 12, 3, 14, 10], [6, 6, 5, 6, 7]) == [5, 7]
    assert candidate([1, 6, 6, 2, 9, 4, 13, 8], [4, 5, 4, 6, 8]) == [4, 4, 6, 8]
    assert candidate([3, 1, 2, 1, 4, 12, 7, 14], [4, 4, 2, 6, 5]) == [4, 4, 2]
    assert candidate([6, 2, 7, 7, 8, 3, 11, 8], [4, 7, 5, 12, 5]) == [7]
    assert candidate([2, 3, 3, 8, 8, 3, 11, 8], [1, 3, 2, 4, 6]) == [3, 2]
    assert candidate([2, 5, 4, 10, 6, 3, 11, 10], [2, 6, 7, 7, 7]) == [2, 6]
    assert candidate([6, 3, 5, 10, 8, 9, 12, 10], [1, 7, 8, 8, 5]) == [8, 8, 5]
    assert candidate([4, 3, 7, 6, 12, 11, 8, 8], [6, 1, 9, 9, 10]) == [6]
    assert candidate([2, 5, 5, 4, 10, 7, 12, 11], [4, 7, 1, 7, 9]) == [4, 7, 7]
    assert candidate([4, 5, 3, 1, 3, 12, 4, 12], [2, 4, 6, 13, 13]) == [4]
    assert candidate([4, 2, 3, 7, 5, 13, 13, 8], [2, 5, 6, 5, 12]) == [2, 5, 5]
    assert candidate([3, 5, 3, 4, 3, 6, 7, 14], [4, 3, 2, 9, 10]) == [4, 3]
    assert candidate([2, 4, 7, 8, 8, 5, 5, 6], [5, 1, 2, 9, 4]) == [5, 2, 4]
    assert candidate([2, 4, 3, 10, 8, 3, 5, 15], [1, 6, 5, 9, 11]) == [5]
    assert candidate([3, 5, 5, 5, 5, 9, 5, 8], [2, 1, 6, 8, 14]) == [8]
    assert candidate([2, 3, 4, 6, 10, 5, 7, 11], [6, 7, 9, 4, 12]) == [6, 7, 4]
    assert candidate([2, 4, 4, 8, 6, 9, 4, 10], [4, 6, 7, 9, 7]) == [4, 6, 9]
    assert candidate([4, 6, 8, 7, 11, 8, 8, 13], [2, 1, 3, 4, 4]) == [4, 4]
    assert candidate([4, 4, 3, 6, 9, 12, 11, 10], [1, 1, 8, 5, 9]) == [9]
    assert candidate([5, 5, 3, 1, 8, 11, 9, 11], [5, 4, 7, 10, 12]) == [5]
    assert candidate([4, 3, 8, 1, 4, 12, 7, 14], [6, 7, 1, 13, 11]) == [7, 1]
    assert candidate([4, 4, 8, 3, 8, 5, 9, 12], [3, 5, 8, 9, 5]) == [3, 5, 8, 9, 5]
    assert candidate([5, 4, 6, 6, 12, 9, 9, 11], [1, 5, 6, 5, 10]) == [5, 6, 5]
    assert candidate([4, 6, 5, 1, 11, 8, 9, 14], [1, 4, 9, 10, 4]) == [1, 4, 9, 4]
    assert candidate([6, 1, 6, 10, 10, 9, 8, 14], [2, 5, 6, 3, 14]) == [6, 14]
    assert candidate([3, 7, 4, 3, 11, 12, 8, 15], [3, 2, 4, 10, 5]) == [3, 4]
    assert candidate([2, 4, 8, 3, 9, 10, 14, 5], [4, 3, 3, 4, 11]) == [4, 3, 3, 4]
    assert candidate([2, 2, 1, 5, 3, 4, 8, 13], [4, 2, 3, 10, 9]) == [4, 2, 3]
    assert candidate([2, 3, 5, 5, 2, 7, 9, 15], [3, 1, 12, 5]) == [3, 5]
    assert candidate([3, 7, 4, 8, 6, 13, 14, 15], [3, 8, 9, 12]) == [3, 8]
    assert candidate([1, 2, 8, 6, 11, 5, 11, 9], [5, 5, 2, 11]) == [5, 5, 2, 11]
    assert candidate([5, 1, 1, 8, 9, 12, 5, 15], [3, 1, 5, 12]) == [1, 5, 12]
    assert candidate([2, 7, 2, 9, 12, 9, 14, 11], [6, 6, 12, 14]) == [12, 14]
    assert candidate([5, 2, 4, 5, 7, 11, 8, 8], [6, 8, 4, 6]) == [8, 4]
    assert candidate([1, 4, 3, 8, 5, 7, 6, 8], [2, 6, 2, 8]) == [6, 8]
    assert candidate([3, 1, 4, 6, 6, 5, 13, 5], [2, 7, 7, 13]) == [13]
    assert candidate([6, 3, 5, 8, 7, 4, 13, 8], [6, 9, 12, 11]) == [6]
    assert candidate([5, 4, 8, 7, 8, 7, 6, 14], [4, 5, 7, 12]) == [4, 5, 7]
    assert candidate([5, 6, 2, 3, 8, 6, 5, 6], [1, 1, 2, 12]) == [2]
    assert candidate([4, 5, 8, 9, 2, 9, 13, 15], [2, 7, 8, 10]) == [2, 8]
    assert candidate([3, 2, 8, 5, 5, 12, 5, 8], [6, 3, 2, 14]) == [3, 2]
    assert candidate([1, 7, 4, 8, 8, 11, 8, 14], [6, 10, 4, 4]) == [4, 4]
    assert candidate([2, 1, 2, 2, 10, 6, 13, 7], [8, 6, 12, 5]) == [6]
    assert candidate([6, 7, 5, 6, 8, 7, 8, 12], [2, 10, 5, 13]) == [5]
    assert candidate([2, 2, 8, 5, 8, 12, 12, 7], [7, 2, 8, 5]) == [7, 2, 8, 5]
    assert candidate([4, 5, 6, 6, 6, 13, 12, 15], [8, 8, 12, 7]) == [12]
    assert candidate([4, 3, 3, 7, 9, 6, 4, 12], [3, 9, 5, 14]) == [3, 9]
    assert candidate([3, 7, 6, 5, 11, 5, 8, 12], [5, 10, 3, 6]) == [5, 3, 6]
    assert candidate([3, 5, 6, 5, 3, 8, 4, 8], [6, 10, 2, 6]) == [6, 6]
    assert candidate([4, 3, 4, 6, 4, 13, 5, 10], [7, 2, 7, 10]) == [10]
    assert candidate([1, 7, 1, 10, 5, 13, 9, 5], [7, 7, 9, 11]) == [7, 7, 9]
    assert candidate([4, 3, 5, 5, 7, 9, 4, 11], [6, 10, 9, 5]) == [9, 5]
    assert candidate([1, 5, 8, 4, 12, 11, 13, 11], [5, 3, 5, 7]) == [5, 5]
    assert candidate([1, 6, 4, 4, 9, 4, 10, 13], [1, 8, 12, 10]) == [1, 10]
    assert candidate([6, 5, 5, 8, 5, 11, 10, 11], [6, 9, 12, 7]) == [6]
    assert candidate([1, 1, 4, 1, 8, 5, 7, 14], [5, 1, 2, 14]) == [5, 1, 14]
    assert candidate([2, 2, 8, 2, 12, 6, 7, 10], [5, 6, 9, 13]) == [6]
    assert candidate([3, 5, 2, 9, 9, 7, 13, 7], [4, 8, 8, 5]) == [5]
    assert candidate([6, 1, 7, 8, 10, 13, 9, 6], [3, 3, 10, 7]) == [10, 7]
    assert candidate([5, 5, 4, 4, 12, 6, 7, 14], [5, 7, 9, 14]) == [5, 7, 14]
    assert candidate([5, 6, 6, 10, 4, 4, 4, 14], [7, 5, 3, 8]) == [5]
    assert candidate([2, 2, 7, 8, 11, 8, 8, 6], [11, 22, 33, 36]) == [11]
    assert candidate([4, 3, 3, 9, 5, 8, 10, 14], [15, 18, 28, 40]) == []
    assert candidate([4, 1, 1, 3, 8, 6, 14, 8], [8, 24, 28, 38]) == [8]
    assert candidate([6, 2, 7, 3, 6, 5, 13, 6], [13, 15, 30, 45]) == [13]
    assert candidate([1, 2, 5, 1, 9, 12, 8, 14], [10, 16, 28, 39]) == []
    assert candidate([5, 6, 6, 8, 3, 7, 8, 7], [10, 21, 34, 40]) == []
    assert candidate([1, 6, 1, 6, 3, 11, 11, 9], [8, 24, 28, 40]) == []
    assert candidate([3, 3, 1, 5, 9, 8, 9, 14], [5, 24, 34, 41]) == [5]
    assert candidate([5, 1, 2, 8, 10, 5, 5, 12], [9, 22, 25, 41]) == []
    assert candidate([1, 4, 8, 10, 12, 13, 8, 13], [7, 16, 30, 37]) == []
    assert candidate([3, 2, 6, 2, 11, 12, 4, 15], [9, 17, 29, 41]) == []
    assert candidate([1, 6, 5, 3, 2, 8, 7, 8], [8, 23, 33, 38]) == [8]
    assert candidate([5, 1, 4, 6, 9, 7, 11, 10], [8, 24, 31, 35]) == []
    assert candidate([3, 4, 2, 4, 8, 6, 13, 5], [12, 24, 26, 35]) == []
    assert candidate([6, 6, 6, 7, 12, 11, 12, 9], [8, 16, 32, 36]) == []
    assert candidate([6, 7, 4, 2, 10, 9, 14, 12], [6, 15, 34, 45]) == [6]
    assert candidate([5, 6, 4, 6, 8, 3, 11, 13], [11, 16, 31, 36]) == [11]
    assert candidate([3, 5, 2, 10, 10, 11, 10, 14], [14, 17, 25, 35]) == [14]
    assert candidate([2, 2, 2, 2, 4, 8, 6, 5], [9, 18, 30, 37]) == []
    assert candidate([6, 7, 8, 10, 6, 7, 12, 7], [7, 18, 27, 36]) == [7]
    assert candidate([2, 4, 8, 3, 12, 9, 13, 7], [12, 20, 35, 45]) == [12]
    assert candidate([5, 6, 6, 1, 3, 11, 9, 8], [12, 17, 32, 38]) == []
    assert candidate([4, 5, 3, 9, 10, 4, 7, 11], [10, 18, 27, 39]) == [10]
    assert candidate([3, 6, 4, 4, 6, 11, 14, 12], [6, 21, 31, 39]) == [6]
    assert candidate([5, 7, 5, 2, 12, 13, 12, 10], [10, 15, 26, 37]) == [10]
    assert candidate([1, 5, 2, 7, 2, 10, 9, 14], [8, 24, 31, 40]) == []
    assert candidate([4, 5, 8, 2, 12, 7, 10, 6], [10, 17, 25, 45]) == [10]
    assert candidate([1, 3, 5, 7, 8, 4, 5, 5], [9, 23, 35, 38]) == []
    assert candidate([3, 6, 7, 9, 3, 3, 9, 6], [14, 15, 29, 40]) == []
    assert candidate([6, 5, 3, 10, 7, 7, 7, 8], [9, 16, 33, 45]) == []
    assert candidate([2, 1, 6, 10, 6, 6, 14, 11], [15, 25, 29, 43]) == []
    assert candidate([5, 7, 6, 7, 6, 7, 10, 13], [8, 21, 30, 37]) == []
    assert candidate([2, 1, 6, 1, 12, 4, 9, 8], [6, 25, 32, 42]) == [6]

if __name__ == '__main__':
    check(intersection_array)