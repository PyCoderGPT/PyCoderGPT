from case_MBPP_205 import max_Product


def check(candidate):
    assert candidate([1,2,3,4,7,0,8,4]) == (7,8)
    assert candidate([0,-1,-2,-4,5,0,-6]) == (-4,-6)
    assert candidate([1,2,3]) == (2,3)
    assert candidate([2, 2, 4, 5, 3, 2, 3, 4]) == (4, 5)
    assert candidate([6, 7, 3, 6, 7, 3, 4, 6]) == (7, 7)
    assert candidate([6, 5, 3, 6, 8, 5, 11, 7]) == (8, 11)
    assert candidate([5, 4, 2, 6, 11, 2, 5, 3]) == (6, 11)
    assert candidate([2, 3, 5, 6, 3, 4, 11, 1]) == (6, 11)
    assert candidate([2, 7, 6, 2, 4, 3, 10, 2]) == (7, 10)
    assert candidate([1, 4, 1, 4, 2, 4, 5, 5]) == (5, 5)
    assert candidate([5, 3, 3, 9, 7, 5, 10, 8]) == (9, 10)
    assert candidate([5, 2, 3, 2, 8, 3, 11, 1]) == (8, 11)
    assert candidate([1, 3, 7, 5, 8, 2, 3, 7]) == (7, 8)
    assert candidate([6, 4, 5, 9, 10, 2, 3, 4]) == (9, 10)
    assert candidate([6, 3, 2, 6, 12, 5, 11, 7]) == (12, 11)
    assert candidate([4, 2, 8, 1, 2, 4, 5, 2]) == (8, 5)
    assert candidate([2, 2, 3, 5, 6, 3, 11, 1]) == (6, 11)
    assert candidate([5, 2, 7, 8, 4, 2, 11, 9]) == (11, 9)
    assert candidate([3, 3, 6, 1, 10, 4, 12, 5]) == (10, 12)
    assert candidate([6, 3, 4, 5, 8, 1, 9, 5]) == (8, 9)
    assert candidate([6, 6, 2, 3, 3, 5, 7, 9]) == (7, 9)
    assert candidate([3, 4, 1, 9, 8, 5, 6, 4]) == (9, 8)
    assert candidate([4, 3, 1, 9, 7, 5, 8, 4]) == (9, 8)
    assert candidate([6, 7, 2, 4, 10, 4, 11, 1]) == (10, 11)
    assert candidate([1, 4, 8, 7, 3, 5, 7, 1]) == (8, 7)
    assert candidate([5, 3, 7, 1, 11, 5, 3, 9]) == (11, 9)
    assert candidate([6, 5, 6, 3, 10, 3, 13, 3]) == (10, 13)
    assert candidate([3, 5, 2, 5, 7, 3, 3, 7]) == (7, 7)
    assert candidate([3, 1, 6, 3, 12, 2, 5, 9]) == (12, 9)
    assert candidate([6, 1, 5, 4, 7, 1, 12, 1]) == (7, 12)
    assert candidate([4, 6, 2, 8, 6, 3, 12, 9]) == (12, 9)
    assert candidate([1, 2, 1, 2, 5, 3, 8, 4]) == (5, 8)
    assert candidate([5, 2, 1, 6, 3, 3, 7, 3]) == (6, 7)
    assert candidate([4, 3, 6, 9, 12, 4, 3, 2]) == (9, 12)
    assert candidate([5, 7, 8, 2, 7, 2, 7, 2]) == (7, 8)
    assert candidate([5, 7, 3, 4, 2, 2, 3, 9]) == (7, 9)
    assert candidate([1, 4, 0, -1, 6, 5, -6]) == (6, 5)
    assert candidate([4, 0, 3, 1, 10, 1, -7]) == (4, 10)
    assert candidate([2, 2, -2, -6, 1, 1, -9]) == (-6, -9)
    assert candidate([4, -4, -5, -1, 7, 2, -8]) == (-5, -8)
    assert candidate([3, -2, -6, 1, 3, 5, -10]) == (-6, -10)
    assert candidate([5, -4, 0, -4, 3, 1, -1]) == (-4, -4)
    assert candidate([5, -5, -4, -6, 9, 1, -10]) == (-6, -10)
    assert candidate([1, -2, -1, -7, 8, 3, -6]) == (-7, -6)
    assert candidate([4, 0, -5, -1, 3, 4, -6]) == (-5, -6)
    assert candidate([2, 0, -6, -8, 5, 2, -5]) == (-6, -8)
    assert candidate([5, -4, -3, -7, 2, 4, -2]) == (-4, -7)
    assert candidate([1, -2, -3, -2, 10, 4, -2]) == (10, 4)
    assert candidate([2, -6, -1, 0, 9, 3, -2]) == (9, 3)
    assert candidate([1, -2, 0, -5, 7, 4, -3]) == (7, 4)
    assert candidate([2, 0, 2, -8, 7, 2, -3]) == (-8, -3)
    assert candidate([5, -2, 1, -6, 8, 5, -8]) == (-6, -8)
    assert candidate([4, -4, -5, -3, 4, 5, -1]) == (4, 5)
    assert candidate([2, 3, -4, -5, 8, 1, -4]) == (3, 8)
    assert candidate([3, -1, 1, 1, 2, 4, -11]) == (3, 4)
    assert candidate([5, -6, 0, -4, 9, 3, -9]) == (-6, -9)
    assert candidate([3, -5, 0, -9, 8, 4, -4]) == (-5, -9)
    assert candidate([5, 4, 3, -8, 3, 4, -3]) == (-8, -3)
    assert candidate([3, -5, -7, -6, 1, 5, -5]) == (-7, -6)
    assert candidate([2, 1, -5, -4, 6, 4, -8]) == (-5, -8)
    assert candidate([4, -5, -5, -4, 9, 3, -1]) == (4, 9)
    assert candidate([3, -6, 3, -8, 5, 1, -9]) == (-8, -9)
    assert candidate([2, 0, 0, -9, 2, 5, -7]) == (-9, -7)
    assert candidate([2, -2, 0, -1, 6, 2, -5]) == (2, 6)
    assert candidate([2, 0, -5, -9, 2, 4, -1]) == (-5, -9)
    assert candidate([5, 1, -5, -2, 4, 1, -1]) == (5, 4)
    assert candidate([1, 4, -3, -5, 4, 4, -8]) == (-5, -8)
    assert candidate([1, -1, -4, -2, 1, 5, -4]) == (-4, -4)
    assert candidate([2, 0, 1, -7, 1, 2, -6]) == (-7, -6)
    assert candidate([2, 1, 7]) == (2, 7)
    assert candidate([2, 3, 8]) == (3, 8)
    assert candidate([1, 4, 5]) == (4, 5)
    assert candidate([2, 1, 1]) == (2, 1)
    assert candidate([1, 5, 8]) == (5, 8)
    assert candidate([6, 5, 6]) == (6, 6)
    assert candidate([1, 7, 5]) == (7, 5)
    assert candidate([2, 7, 3]) == (7, 3)
    assert candidate([2, 5, 1]) == (2, 5)
    assert candidate([3, 2, 5]) == (3, 5)
    assert candidate([5, 3, 3]) == (5, 3)
    assert candidate([2, 4, 4]) == (4, 4)
    assert candidate([5, 3, 6]) == (5, 6)
    assert candidate([6, 5, 2]) == (6, 5)
    assert candidate([4, 3, 2]) == (4, 3)
    assert candidate([4, 1, 2]) == (4, 2)
    assert candidate([6, 2, 1]) == (6, 2)
    assert candidate([5, 5, 3]) == (5, 5)
    assert candidate([3, 5, 8]) == (5, 8)
    assert candidate([2, 6, 5]) == (6, 5)
    assert candidate([6, 7, 3]) == (6, 7)
    assert candidate([5, 6, 1]) == (5, 6)
    assert candidate([1, 6, 4]) == (6, 4)
    assert candidate([6, 7, 5]) == (6, 7)
    assert candidate([4, 2, 7]) == (4, 7)
    assert candidate([5, 2, 5]) == (5, 5)
    assert candidate([5, 4, 2]) == (5, 4)
    assert candidate([6, 3, 5]) == (6, 5)
    assert candidate([4, 5, 3]) == (4, 5)
    assert candidate([5, 7, 4]) == (5, 7)
    assert candidate([2, 6, 7]) == (6, 7)
    assert candidate([2, 2, 8]) == (2, 8)
    assert candidate([5, 4, 4]) == (5, 4)

if __name__ == '__main__':
    check(max_Product)