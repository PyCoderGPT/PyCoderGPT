from case_MBPP_279 import two_unique_nums


def check(candidate):
    assert candidate([1,2,3,2,3,4,5]) == [1, 4, 5]
    assert candidate([1,2,3,2,4,5]) == [1, 3, 4, 5]
    assert candidate([1,2,3,4,5]) == [1, 2, 3, 4, 5]
    assert candidate([1, 2, 5, 3, 2, 1, 5]) == [3]
    assert candidate([2, 6, 2, 4, 2, 1, 10]) == [6, 4, 1, 10]
    assert candidate([1, 2, 4, 7, 2, 8, 3]) == [1, 4, 7, 8, 3]
    assert candidate([1, 6, 3, 7, 6, 4, 8]) == [1, 3, 7, 4, 8]
    assert candidate([2, 5, 5, 1, 7, 4, 5]) == [2, 1, 7, 4]
    assert candidate([2, 7, 4, 1, 5, 5, 3]) == [2, 7, 4, 1, 3]
    assert candidate([2, 5, 2, 1, 3, 4, 8]) == [5, 1, 3, 4, 8]
    assert candidate([1, 6, 5, 4, 6, 3, 10]) == [1, 5, 4, 3, 10]
    assert candidate([4, 7, 3, 4, 6, 2, 10]) == [7, 3, 6, 2, 10]
    assert candidate([3, 7, 2, 2, 6, 9, 10]) == [3, 7, 6, 9, 10]
    assert candidate([5, 1, 5, 4, 3, 2, 1]) == [4, 3, 2]
    assert candidate([3, 5, 3, 5, 1, 2, 3]) == [1, 2]
    assert candidate([2, 5, 1, 2, 4, 2, 6]) == [5, 1, 4, 6]
    assert candidate([5, 2, 7, 6, 2, 7, 5]) == [6]
    assert candidate([5, 4, 2, 5, 7, 7, 5]) == [4, 2]
    assert candidate([3, 2, 7, 1, 5, 8, 5]) == [3, 2, 7, 1, 8]
    assert candidate([5, 6, 8, 2, 1, 7, 1]) == [5, 6, 8, 2, 7]
    assert candidate([5, 6, 1, 1, 5, 8, 10]) == [6, 8, 10]
    assert candidate([4, 5, 8, 3, 6, 4, 6]) == [5, 8, 3]
    assert candidate([4, 7, 7, 7, 8, 5, 10]) == [4, 8, 5, 10]
    assert candidate([4, 6, 5, 7, 3, 7, 10]) == [4, 6, 5, 3, 10]
    assert candidate([2, 3, 7, 6, 6, 7, 8]) == [2, 3, 8]
    assert candidate([5, 2, 1, 4, 4, 8, 4]) == [5, 2, 1, 8]
    assert candidate([3, 1, 4, 6, 3, 4, 2]) == [1, 6, 2]
    assert candidate([2, 2, 3, 5, 7, 5, 2]) == [3, 7]
    assert candidate([4, 1, 5, 4, 4, 9, 1]) == [5, 9]
    assert candidate([5, 6, 1, 6, 2, 4, 10]) == [5, 1, 2, 4, 10]
    assert candidate([5, 3, 2, 6, 2, 4, 9]) == [5, 3, 6, 4, 9]
    assert candidate([1, 3, 3, 4, 4, 5, 8]) == [1, 5, 8]
    assert candidate([4, 6, 8, 5, 2, 4, 3]) == [6, 8, 5, 2, 3]
    assert candidate([3, 7, 2, 7, 7, 7, 2]) == [3]
    assert candidate([6, 7, 7, 4, 4, 6, 5]) == [5]
    assert candidate([1, 4, 8, 2, 6, 9, 2]) == [1, 4, 8, 6, 9]
    assert candidate([2, 7, 4, 4, 9, 8]) == [2, 7, 9, 8]
    assert candidate([4, 5, 4, 1, 6, 10]) == [5, 1, 6, 10]
    assert candidate([4, 3, 7, 1, 6, 9]) == [4, 3, 7, 1, 6, 9]
    assert candidate([1, 1, 2, 7, 1, 1]) == [2, 7]
    assert candidate([5, 4, 1, 5, 2, 1]) == [4, 2]
    assert candidate([1, 6, 6, 3, 3, 5]) == [1, 5]
    assert candidate([6, 2, 8, 4, 1, 9]) == [6, 2, 8, 4, 1, 9]
    assert candidate([4, 5, 7, 5, 9, 7]) == [4, 9]
    assert candidate([1, 4, 7, 2, 4, 9]) == [1, 7, 2, 9]
    assert candidate([1, 2, 6, 7, 8, 5]) == [1, 2, 6, 7, 8, 5]
    assert candidate([3, 3, 6, 7, 8, 3]) == [6, 7, 8]
    assert candidate([2, 6, 1, 2, 9, 2]) == [6, 1, 9]
    assert candidate([2, 4, 8, 5, 7, 8]) == [2, 4, 5, 7]
    assert candidate([6, 7, 5, 1, 9, 9]) == [6, 7, 5, 1]
    assert candidate([4, 1, 1, 6, 4, 7]) == [6, 7]
    assert candidate([5, 4, 2, 2, 6, 2]) == [5, 4, 6]
    assert candidate([5, 1, 3, 2, 8, 6]) == [5, 1, 3, 2, 8, 6]
    assert candidate([4, 3, 4, 4, 1, 6]) == [3, 1, 6]
    assert candidate([4, 2, 4, 6, 4, 3]) == [2, 6, 3]
    assert candidate([1, 5, 1, 7, 6, 7]) == [5, 6]
    assert candidate([4, 2, 1, 4, 3, 7]) == [2, 1, 3, 7]
    assert candidate([2, 5, 3, 2, 9, 6]) == [5, 3, 9, 6]
    assert candidate([4, 4, 4, 2, 5, 1]) == [2, 5, 1]
    assert candidate([5, 4, 5, 1, 3, 1]) == [4, 3]
    assert candidate([6, 2, 1, 3, 9, 5]) == [6, 2, 1, 3, 9, 5]
    assert candidate([2, 4, 8, 7, 4, 9]) == [2, 8, 7, 9]
    assert candidate([6, 6, 6, 1, 1, 5]) == [5]
    assert candidate([1, 6, 6, 4, 9, 4]) == [1, 9]
    assert candidate([6, 3, 6, 5, 5, 3]) == []
    assert candidate([3, 1, 7, 2, 8, 8]) == [3, 1, 7, 2]
    assert candidate([1, 6, 2, 5, 8, 2]) == [1, 6, 5, 8]
    assert candidate([2, 7, 4, 6, 7, 1]) == [2, 4, 6, 1]
    assert candidate([5, 4, 7, 3, 2, 2]) == [5, 4, 7, 3]
    assert candidate([2, 6, 8, 8, 10]) == [2, 6, 10]
    assert candidate([3, 5, 3, 3, 6]) == [5, 6]
    assert candidate([2, 1, 4, 9, 4]) == [2, 1, 9]
    assert candidate([6, 3, 3, 7, 7]) == [6]
    assert candidate([1, 5, 6, 4, 9]) == [1, 5, 6, 4, 9]
    assert candidate([6, 6, 6, 4, 6]) == [4]
    assert candidate([1, 6, 1, 6, 6]) == []
    assert candidate([4, 3, 8, 3, 8]) == [4]
    assert candidate([5, 4, 5, 3, 1]) == [4, 3, 1]
    assert candidate([2, 7, 3, 9, 5]) == [2, 7, 3, 9, 5]
    assert candidate([1, 2, 7, 3, 1]) == [2, 7, 3]
    assert candidate([1, 7, 1, 9, 2]) == [7, 9, 2]
    assert candidate([4, 1, 3, 4, 5]) == [1, 3, 5]
    assert candidate([1, 6, 3, 2, 5]) == [1, 6, 3, 2, 5]
    assert candidate([5, 3, 2, 5, 7]) == [3, 2, 7]
    assert candidate([5, 7, 6, 8, 2]) == [5, 7, 6, 8, 2]
    assert candidate([5, 4, 2, 8, 4]) == [5, 2, 8]
    assert candidate([4, 7, 8, 5, 9]) == [4, 7, 8, 5, 9]
    assert candidate([3, 4, 7, 8, 4]) == [3, 7, 8]
    assert candidate([5, 4, 7, 7, 5]) == [4]
    assert candidate([6, 6, 8, 6, 5]) == [8, 5]
    assert candidate([4, 7, 8, 3, 6]) == [4, 7, 8, 3, 6]
    assert candidate([6, 7, 7, 3, 1]) == [6, 3, 1]
    assert candidate([4, 6, 4, 6, 10]) == [10]
    assert candidate([1, 1, 3, 6, 1]) == [3, 6]
    assert candidate([6, 7, 6, 3, 6]) == [7, 3]
    assert candidate([1, 2, 1, 7, 5]) == [2, 7, 5]
    assert candidate([1, 2, 7, 4, 2]) == [1, 7, 4]
    assert candidate([3, 3, 2, 8, 3]) == [2, 8]
    assert candidate([4, 6, 3, 4, 3]) == [6]
    assert candidate([2, 6, 1, 6, 4]) == [2, 1, 4]
    assert candidate([5, 1, 1, 2, 8]) == [5, 2, 8]
    assert candidate([2, 4, 8, 4, 9]) == [2, 8, 9]

if __name__ == '__main__':
    check(two_unique_nums)