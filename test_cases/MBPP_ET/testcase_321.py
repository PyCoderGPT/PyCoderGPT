from case_MBPP_321 import div_list


def check(candidate):
    assert candidate([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]
    assert candidate([3,2],[1,4])==[3.0, 0.5]
    assert candidate([90,120],[50,70])==[1.8, 1.7142857142857142]
    assert candidate([5, 1, 4], [4, 2, 6]) == [1.25, 0.5, 0.6666666666666666]
    assert candidate([7, 3, 4], [2, 1, 8]) == [3.5, 3.0, 0.5]
    assert candidate([2, 3, 1], [1, 2, 1]) == [2.0, 1.5, 1.0]
    assert candidate([3, 7, 8], [6, 4, 6]) == [0.5, 1.75, 1.3333333333333333]
    assert candidate([7, 7, 8], [4, 6, 1]) == [1.75, 1.1666666666666667, 8.0]
    assert candidate([3, 4, 1], [4, 3, 5]) == [0.75, 1.3333333333333333, 0.2]
    assert candidate([5, 1, 7], [4, 1, 6]) == [1.25, 1.0, 1.1666666666666667]
    assert candidate([1, 9, 5], [2, 1, 8]) == [0.5, 9.0, 0.625]
    assert candidate([6, 4, 6], [6, 1, 8]) == [1.0, 4.0, 0.75]
    assert candidate([3, 9, 4], [4, 6, 3]) == [0.75, 1.5, 1.3333333333333333]
    assert candidate([5, 4, 1], [6, 7, 1]) == [0.8333333333333334, 0.5714285714285714, 1.0]
    assert candidate([3, 7, 10], [1, 2, 8]) == [3.0, 3.5, 1.25]
    assert candidate([3, 4, 10], [6, 2, 6]) == [0.5, 2.0, 1.6666666666666667]
    assert candidate([8, 9, 11], [5, 6, 8]) == [1.6, 1.5, 1.375]
    assert candidate([8, 4, 4], [4, 1, 6]) == [2.0, 4.0, 0.6666666666666666]
    assert candidate([7, 4, 8], [4, 6, 4]) == [1.75, 0.6666666666666666, 2.0]
    assert candidate([7, 9, 2], [1, 1, 8]) == [7.0, 9.0, 0.25]
    assert candidate([6, 3, 5], [4, 6, 8]) == [1.5, 0.5, 0.625]
    assert candidate([8, 2, 4], [2, 4, 6]) == [4.0, 0.5, 0.6666666666666666]
    assert candidate([4, 8, 7], [6, 1, 1]) == [0.6666666666666666, 8.0, 7.0]
    assert candidate([8, 6, 10], [1, 1, 8]) == [8.0, 6.0, 1.25]
    assert candidate([4, 3, 2], [1, 7, 2]) == [4.0, 0.42857142857142855, 1.0]
    assert candidate([8, 1, 9], [5, 5, 1]) == [1.6, 0.2, 9.0]
    assert candidate([3, 3, 1], [6, 1, 7]) == [0.5, 3.0, 0.14285714285714285]
    assert candidate([5, 5, 9], [4, 2, 5]) == [1.25, 2.5, 1.8]
    assert candidate([5, 10, 7], [3, 5, 7]) == [1.6666666666666667, 2.0, 1.0]
    assert candidate([7, 3, 5], [6, 3, 4]) == [1.1666666666666667, 1.0, 1.25]
    assert candidate([8, 6, 8], [5, 1, 1]) == [1.6, 6.0, 8.0]
    assert candidate([4, 8, 8], [4, 2, 5]) == [1.0, 4.0, 1.6]
    assert candidate([7, 1, 8], [2, 3, 7]) == [3.5, 0.3333333333333333, 1.1428571428571428]
    assert candidate([8, 10, 1], [3, 1, 1]) == [2.6666666666666665, 10.0, 1.0]
    assert candidate([1, 8, 11], [1, 5, 5]) == [1.0, 1.6, 2.2]
    assert candidate([9, 9, 3], [3, 1, 8]) == [3.0, 9.0, 0.375]
    assert candidate([1, 7], [4, 4]) == [0.25, 1.75]
    assert candidate([8, 3], [4, 6]) == [2.0, 0.5]
    assert candidate([7, 6], [6, 8]) == [1.1666666666666667, 0.75]
    assert candidate([4, 6], [3, 2]) == [1.3333333333333333, 3.0]
    assert candidate([4, 2], [6, 5]) == [0.6666666666666666, 0.4]
    assert candidate([6, 2], [1, 6]) == [6.0, 0.3333333333333333]
    assert candidate([5, 4], [5, 2]) == [1.0, 2.0]
    assert candidate([6, 2], [2, 4]) == [3.0, 0.5]
    assert candidate([1, 3], [1, 8]) == [1.0, 0.375]
    assert candidate([5, 7], [2, 4]) == [2.5, 1.75]
    assert candidate([2, 5], [6, 7]) == [0.3333333333333333, 0.7142857142857143]
    assert candidate([6, 5], [5, 9]) == [1.2, 0.5555555555555556]
    assert candidate([1, 6], [4, 2]) == [0.25, 3.0]
    assert candidate([7, 3], [5, 7]) == [1.4, 0.42857142857142855]
    assert candidate([6, 1], [3, 6]) == [2.0, 0.16666666666666666]
    assert candidate([4, 6], [2, 7]) == [2.0, 0.8571428571428571]
    assert candidate([2, 1], [1, 7]) == [2.0, 0.14285714285714285]
    assert candidate([8, 5], [3, 4]) == [2.6666666666666665, 1.25]
    assert candidate([4, 2], [3, 8]) == [1.3333333333333333, 0.25]
    assert candidate([1, 7], [6, 8]) == [0.16666666666666666, 0.875]
    assert candidate([5, 5], [1, 6]) == [5.0, 0.8333333333333334]
    assert candidate([2, 4], [4, 5]) == [0.5, 0.8]
    assert candidate([3, 4], [5, 8]) == [0.6, 0.5]
    assert candidate([2, 1], [4, 2]) == [0.5, 0.5]
    assert candidate([2, 2], [6, 7]) == [0.3333333333333333, 0.2857142857142857]
    assert candidate([4, 7], [5, 3]) == [0.8, 2.3333333333333335]
    assert candidate([4, 1], [2, 1]) == [2.0, 1.0]
    assert candidate([5, 4], [1, 6]) == [5.0, 0.6666666666666666]
    assert candidate([1, 4], [3, 8]) == [0.3333333333333333, 0.5]
    assert candidate([1, 4], [1, 2]) == [1.0, 2.0]
    assert candidate([5, 4], [2, 4]) == [2.5, 1.0]
    assert candidate([8, 4], [2, 6]) == [4.0, 0.6666666666666666]
    assert candidate([7, 3], [4, 9]) == [1.75, 0.3333333333333333]
    assert candidate([85, 115], [55, 71]) == [1.5454545454545454, 1.619718309859155]
    assert candidate([94, 119], [46, 67]) == [2.0434782608695654, 1.7761194029850746]
    assert candidate([95, 121], [47, 73]) == [2.021276595744681, 1.6575342465753424]
    assert candidate([92, 123], [51, 70]) == [1.803921568627451, 1.7571428571428571]
    assert candidate([85, 125], [53, 70]) == [1.6037735849056605, 1.7857142857142858]
    assert candidate([87, 118], [51, 73]) == [1.7058823529411764, 1.6164383561643836]
    assert candidate([90, 120], [51, 66]) == [1.7647058823529411, 1.8181818181818181]
    assert candidate([85, 115], [53, 71]) == [1.6037735849056605, 1.619718309859155]
    assert candidate([86, 125], [52, 66]) == [1.6538461538461537, 1.893939393939394]
    assert candidate([85, 115], [53, 73]) == [1.6037735849056605, 1.5753424657534247]
    assert candidate([86, 120], [50, 68]) == [1.72, 1.7647058823529411]
    assert candidate([91, 117], [55, 73]) == [1.6545454545454545, 1.6027397260273972]
    assert candidate([89, 118], [47, 67]) == [1.8936170212765957, 1.7611940298507462]
    assert candidate([92, 119], [49, 74]) == [1.8775510204081634, 1.6081081081081081]
    assert candidate([85, 116], [45, 69]) == [1.8888888888888888, 1.681159420289855]
    assert candidate([95, 116], [50, 71]) == [1.9, 1.6338028169014085]
    assert candidate([85, 125], [49, 73]) == [1.7346938775510203, 1.7123287671232876]
    assert candidate([95, 116], [50, 68]) == [1.9, 1.7058823529411764]
    assert candidate([88, 116], [53, 65]) == [1.6603773584905661, 1.7846153846153847]
    assert candidate([94, 119], [50, 68]) == [1.88, 1.75]
    assert candidate([92, 121], [45, 75]) == [2.0444444444444443, 1.6133333333333333]
    assert candidate([87, 119], [46, 69]) == [1.891304347826087, 1.7246376811594204]
    assert candidate([89, 123], [55, 69]) == [1.6181818181818182, 1.7826086956521738]
    assert candidate([93, 125], [52, 67]) == [1.7884615384615385, 1.8656716417910448]
    assert candidate([93, 117], [49, 65]) == [1.8979591836734695, 1.8]
    assert candidate([95, 115], [52, 75]) == [1.8269230769230769, 1.5333333333333334]
    assert candidate([92, 115], [47, 70]) == [1.9574468085106382, 1.6428571428571428]
    assert candidate([86, 124], [52, 67]) == [1.6538461538461537, 1.8507462686567164]
    assert candidate([89, 123], [50, 71]) == [1.78, 1.732394366197183]
    assert candidate([92, 121], [46, 70]) == [2.0, 1.7285714285714286]
    assert candidate([89, 119], [52, 66]) == [1.7115384615384615, 1.803030303030303]
    assert candidate([95, 119], [49, 70]) == [1.9387755102040816, 1.7]
    assert candidate([95, 115], [54, 74]) == [1.7592592592592593, 1.554054054054054]

if __name__ == '__main__':
    check(div_list)