from case_MBPP_136 import split_two_parts


def check(candidate):
    assert candidate([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])
    assert candidate(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])
    assert candidate(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])
    assert candidate([5, 2, 7, 2, 9, 4, 3, 1], 2) == ([5, 2], [7, 2, 9, 4, 3, 1])
    assert candidate([1, 4, 4, 6, 8, 2, 7, 1], 4) == ([1, 4, 4, 6], [8, 2, 7, 1])
    assert candidate([1, 3, 1, 5, 2, 8, 9, 3], 6) == ([1, 3, 1, 5, 2, 8], [9, 3])
    assert candidate([5, 3, 4, 1, 1, 7, 9, 3], 3) == ([5, 3, 4], [1, 1, 7, 9, 3])
    assert candidate([2, 1, 1, 7, 7, 4, 8, 6], 6) == ([2, 1, 1, 7, 7, 4], [8, 6])
    assert candidate([4, 3, 5, 1, 1, 7, 2, 5], 7) == ([4, 3, 5, 1, 1, 7, 2], [5])
    assert candidate([1, 2, 3, 2, 5, 6, 1, 4], 1) == ([1], [2, 3, 2, 5, 6, 1, 4])
    assert candidate([6, 2, 7, 1, 3, 3, 8, 3], 2) == ([6, 2], [7, 1, 3, 3, 8, 3])
    assert candidate([1, 3, 5, 5, 6, 3, 5, 4], 8) == ([1, 3, 5, 5, 6, 3, 5, 4], [])
    assert candidate([4, 1, 3, 3, 6, 7, 7, 3], 1) == ([4], [1, 3, 3, 6, 7, 7, 3])
    assert candidate([4, 1, 5, 4, 4, 6, 1, 3], 4) == ([4, 1, 5, 4], [4, 6, 1, 3])
    assert candidate([6, 1, 5, 4, 9, 9, 3, 6], 5) == ([6, 1, 5, 4, 9], [9, 3, 6])
    assert candidate([2, 4, 7, 3, 5, 7, 4, 4], 5) == ([2, 4, 7, 3, 5], [7, 4, 4])
    assert candidate([3, 6, 5, 3, 4, 7, 4, 4], 3) == ([3, 6, 5], [3, 4, 7, 4, 4])
    assert candidate([2, 2, 7, 5, 6, 9, 10, 3], 8) == ([2, 2, 7, 5, 6, 9, 10, 3], [])
    assert candidate([3, 4, 1, 7, 1, 9, 5, 4], 8) == ([3, 4, 1, 7, 1, 9, 5, 4], [])
    assert candidate([3, 2, 2, 2, 6, 1, 7, 2], 1) == ([3], [2, 2, 2, 6, 1, 7, 2])
    assert candidate([3, 6, 3, 4, 7, 5, 9, 4], 8) == ([3, 6, 3, 4, 7, 5, 9, 4], [])
    assert candidate([2, 5, 3, 4, 6, 6, 6, 3], 4) == ([2, 5, 3, 4], [6, 6, 6, 3])
    assert candidate([3, 4, 2, 1, 1, 3, 7, 1], 7) == ([3, 4, 2, 1, 1, 3, 7], [1])
    assert candidate([3, 4, 1, 6, 4, 6, 8, 2], 5) == ([3, 4, 1, 6, 4], [6, 8, 2])
    assert candidate([1, 1, 6, 3, 2, 3, 6, 1], 6) == ([1, 1, 6, 3, 2, 3], [6, 1])
    assert candidate([5, 1, 4, 5, 5, 6, 2, 1], 6) == ([5, 1, 4, 5, 5, 6], [2, 1])
    assert candidate([5, 1, 5, 6, 6, 6, 8, 6], 3) == ([5, 1, 5], [6, 6, 6, 8, 6])
    assert candidate([2, 1, 7, 3, 3, 4, 9, 2], 2) == ([2, 1], [7, 3, 3, 4, 9, 2])
    assert candidate([6, 3, 7, 4, 8, 5, 1, 4], 4) == ([6, 3, 7, 4], [8, 5, 1, 4])
    assert candidate([1, 3, 5, 2, 6, 6, 6, 2], 6) == ([1, 3, 5, 2, 6, 6], [6, 2])
    assert candidate([1, 5, 4, 4, 7, 3, 2, 6], 4) == ([1, 5, 4, 4], [7, 3, 2, 6])
    assert candidate([3, 5, 2, 8, 8, 4, 2, 3], 5) == ([3, 5, 2, 8, 8], [4, 2, 3])
    assert candidate([3, 6, 6, 4, 4, 8, 4, 2], 5) == ([3, 6, 6, 4, 4], [8, 4, 2])
    assert candidate([2, 5, 3, 6, 7, 3, 10, 5], 7) == ([2, 5, 3, 6, 7, 3, 10], [5])
    assert candidate([3, 5, 3, 2, 1, 9, 1, 6], 5) == ([3, 5, 3, 2, 1], [9, 1, 6])
    assert candidate([6, 3, 4, 8, 4, 2, 3, 3], 7) == ([6, 3, 4, 8, 4, 2, 3], [3])
    assert candidate(['b', 'g', 'i', 'k'], 6) == (['b', 'g', 'i', 'k'], [])
    assert candidate(['b', 'q', 'c', 'c'], 7) == (['b', 'q', 'c', 'c'], [])
    assert candidate(['s', 'x', 'u', 'g'], 5) == (['s', 'x', 'u', 'g'], [])
    assert candidate(['a', 'q', 'n', 'g'], 1) == (['a'], ['q', 'n', 'g'])
    assert candidate(['n', 'u', 'o', 'f'], 7) == (['n', 'u', 'o', 'f'], [])
    assert candidate(['e', 's', 'q', 'a'], 3) == (['e', 's', 'q'], ['a'])
    assert candidate(['b', 'v', 'g', 'w'], 2) == (['b', 'v'], ['g', 'w'])
    assert candidate(['b', 'o', 'u', 'v'], 7) == (['b', 'o', 'u', 'v'], [])
    assert candidate(['s', 'x', 'm', 'n'], 4) == (['s', 'x', 'm', 'n'], [])
    assert candidate(['n', 'u', 'r', 'o'], 4) == (['n', 'u', 'r', 'o'], [])
    assert candidate(['g', 'v', 'r', 'b'], 5) == (['g', 'v', 'r', 'b'], [])
    assert candidate(['s', 'm', 'j', 't'], 1) == (['s'], ['m', 'j', 't'])
    assert candidate(['s', 't', 'j', 's'], 5) == (['s', 't', 'j', 's'], [])
    assert candidate(['q', 'e', 'l', 'k'], 6) == (['q', 'e', 'l', 'k'], [])
    assert candidate(['h', 'n', 'l', 's'], 2) == (['h', 'n'], ['l', 's'])
    assert candidate(['j', 'd', 'z', 'p'], 1) == (['j'], ['d', 'z', 'p'])
    assert candidate(['w', 'z', 'u', 'v'], 4) == (['w', 'z', 'u', 'v'], [])
    assert candidate(['m', 'n', 'd', 'n'], 4) == (['m', 'n', 'd', 'n'], [])
    assert candidate(['v', 'o', 't', 'e'], 2) == (['v', 'o'], ['t', 'e'])
    assert candidate(['u', 'w', 'j', 'u'], 6) == (['u', 'w', 'j', 'u'], [])
    assert candidate(['o', 'o', 'p', 'j'], 2) == (['o', 'o'], ['p', 'j'])
    assert candidate(['j', 'v', 'o', 't'], 1) == (['j'], ['v', 'o', 't'])
    assert candidate(['x', 'r', 'l', 'k'], 6) == (['x', 'r', 'l', 'k'], [])
    assert candidate(['t', 'x', 'v', 'j'], 2) == (['t', 'x'], ['v', 'j'])
    assert candidate(['j', 'u', 't', 'k'], 2) == (['j', 'u'], ['t', 'k'])
    assert candidate(['j', 'h', 'e', 't'], 7) == (['j', 'h', 'e', 't'], [])
    assert candidate(['x', 'x', 'k', 'h'], 4) == (['x', 'x', 'k', 'h'], [])
    assert candidate(['n', 'l', 'a', 'b'], 7) == (['n', 'l', 'a', 'b'], [])
    assert candidate(['s', 'f', 'e', 'n'], 4) == (['s', 'f', 'e', 'n'], [])
    assert candidate(['a', 'd', 'm', 'j'], 3) == (['a', 'd', 'm'], ['j'])
    assert candidate(['e', 't', 'g', 'y'], 3) == (['e', 't', 'g'], ['y'])
    assert candidate(['s', 'r', 'n', 'x'], 6) == (['s', 'r', 'n', 'x'], [])
    assert candidate(['d', 'j', 'u', 'i'], 1) == (['d'], ['j', 'u', 'i'])
    assert candidate(['c', 'c', 'k', 'f', 'p', 'a'], 8) == (['c', 'c', 'k', 'f', 'p', 'a'], [])
    assert candidate(['v', 'm', 'l', 'k', 'g', 't'], 5) == (['v', 'm', 'l', 'k', 'g'], ['t'])
    assert candidate(['m', 'l', 'g', 'w', 'g', 'a'], 8) == (['m', 'l', 'g', 'w', 'g', 'a'], [])
    assert candidate(['m', 'a', 'l', 'g', 'l', 's'], 6) == (['m', 'a', 'l', 'g', 'l', 's'], [])
    assert candidate(['b', 'm', 'l', 'u', 'm', 'm'], 8) == (['b', 'm', 'l', 'u', 'm', 'm'], [])
    assert candidate(['v', 'a', 'e', 's', 'd', 'e'], 5) == (['v', 'a', 'e', 's', 'd'], ['e'])
    assert candidate(['n', 'l', 'l', 'v', 'm', 'h'], 7) == (['n', 'l', 'l', 'v', 'm', 'h'], [])
    assert candidate(['h', 't', 'l', 'u', 'g', 'd'], 4) == (['h', 't', 'l', 'u'], ['g', 'd'])
    assert candidate(['l', 'p', 'w', 'l', 'y', 'c'], 5) == (['l', 'p', 'w', 'l', 'y'], ['c'])
    assert candidate(['w', 'g', 'h', 'd', 'v', 'k'], 9) == (['w', 'g', 'h', 'd', 'v', 'k'], [])
    assert candidate(['r', 'k', 'k', 'e', 'r', 'v'], 1) == (['r'], ['k', 'k', 'e', 'r', 'v'])
    assert candidate(['y', 'y', 'h', 'y', 'f', 'r'], 5) == (['y', 'y', 'h', 'y', 'f'], ['r'])
    assert candidate(['m', 'u', 'k', 'l', 'v', 'w'], 5) == (['m', 'u', 'k', 'l', 'v'], ['w'])
    assert candidate(['o', 'h', 'f', 'b', 'n', 'r'], 6) == (['o', 'h', 'f', 'b', 'n', 'r'], [])
    assert candidate(['j', 'v', 'c', 'g', 'm', 'j'], 2) == (['j', 'v'], ['c', 'g', 'm', 'j'])
    assert candidate(['w', 'r', 'e', 'g', 'u', 'q'], 3) == (['w', 'r', 'e'], ['g', 'u', 'q'])
    assert candidate(['s', 'v', 'e', 's', 'u', 'k'], 7) == (['s', 'v', 'e', 's', 'u', 'k'], [])
    assert candidate(['l', 'u', 'e', 'y', 'l', 'l'], 4) == (['l', 'u', 'e', 'y'], ['l', 'l'])
    assert candidate(['o', 'e', 'q', 'h', 'p', 'w'], 7) == (['o', 'e', 'q', 'h', 'p', 'w'], [])
    assert candidate(['e', 'x', 's', 'd', 'h', 'o'], 2) == (['e', 'x'], ['s', 'd', 'h', 'o'])
    assert candidate(['h', 'o', 'b', 'c', 'k', 'p'], 6) == (['h', 'o', 'b', 'c', 'k', 'p'], [])
    assert candidate(['e', 's', 'c', 'g', 'b', 'i'], 5) == (['e', 's', 'c', 'g', 'b'], ['i'])
    assert candidate(['d', 'k', 'y', 'j', 's', 'n'], 6) == (['d', 'k', 'y', 'j', 's', 'n'], [])
    assert candidate(['k', 'a', 'n', 'l', 's', 'r'], 9) == (['k', 'a', 'n', 'l', 's', 'r'], [])
    assert candidate(['n', 'f', 'n', 't', 'h', 'v'], 9) == (['n', 'f', 'n', 't', 'h', 'v'], [])
    assert candidate(['x', 'm', 'g', 'x', 'x', 'e'], 6) == (['x', 'm', 'g', 'x', 'x', 'e'], [])
    assert candidate(['p', 't', 'o', 'x', 'r', 'z'], 6) == (['p', 't', 'o', 'x', 'r', 'z'], [])
    assert candidate(['u', 'k', 't', 'l', 'n', 's'], 7) == (['u', 'k', 't', 'l', 'n', 's'], [])
    assert candidate(['d', 'h', 'i', 't', 'e', 'b'], 5) == (['d', 'h', 'i', 't', 'e'], ['b'])
    assert candidate(['a', 'k', 's', 'm', 'e', 'z'], 9) == (['a', 'k', 's', 'm', 'e', 'z'], [])
    assert candidate(['w', 'c', 'a', 'a', 'y', 'q'], 4) == (['w', 'c', 'a', 'a'], ['y', 'q'])
    assert candidate(['i', 't', 'n', 'c', 'o', 'd'], 8) == (['i', 't', 'n', 'c', 'o', 'd'], [])
    assert candidate(['p', 'q', 'f', 'z', 'n', 'z'], 1) == (['p'], ['q', 'f', 'z', 'n', 'z'])

if __name__ == '__main__':
    check(split_two_parts)