from case_HE_119 import match_parens


def check(candidate):
    assert candidate((')())', '(()()(')) == 'Yes'
    assert candidate(('((((', ')')) == 'No'
    assert candidate(('()(', '())')) == 'Yes'
    assert candidate(('())', '((((')) == 'No'
    assert candidate(('(()(', '()(')) == 'No'
    assert candidate(('())', '(()()(')) == 'No'
    assert candidate([')', ')']) == 'No'
    assert candidate(('()(', ')')) == 'Yes'
    assert candidate(('(()(())', '()(')) == 'No'
    assert candidate(('(()()(', '())())')) == 'Yes'
    assert candidate(('())', ')())')) == 'No'
    assert candidate(('((((', '((((')) == 'No'
    assert candidate((')(', '(()()(')) == 'No'
    assert candidate((')())', ')())')) == 'No'
    assert candidate((')())', '((())')) == 'No'
    assert candidate(('()', '()(')) == 'No'
    assert candidate(('(()(())', '())())')) == 'No'
    assert candidate(('(', ')')) == 'Yes'
    assert candidate(('(())))', '()(')) == 'No'
    assert candidate(('()', '(()())((')) == 'No'
    assert candidate(('())())', '()(')) == 'No'
    assert candidate(('())())', '(()()(')) == 'Yes'
    assert candidate(('()(', '())())')) == 'No'
    assert candidate(('()))()', '())')) == 'No'
    assert candidate(('(())))', '((())')) == 'No'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate((')', '(())))')) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(('(()()(', '(()()(')) == 'No'
    assert candidate((')', '(()(())')) == 'Yes'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate(('(()(())', ')')) == 'Yes'
    assert candidate((')(', '()(')) == 'No'
    assert candidate(('(()()(', ')(()')) == 'No'
    assert candidate(('()(', '(()(())')) == 'No'
    assert candidate((')', '()(')) == 'Yes'
    assert candidate(('())', ')')) == 'No'
    assert candidate(('(()())((', '(()(())')) == 'No'
    assert candidate(('(()(', ')(()')) == 'No'
    assert candidate(('())())', ')())')) == 'No'
    assert candidate(('())', ')(')) == 'No'
    assert candidate(('(()(())', ')(')) == 'No'
    assert candidate(('()', '())')) == 'No'
    assert candidate((')())', '()(')) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(('(()(', '(()())((')) == 'No'
    assert candidate((')', '(()()(')) == 'No'
    assert candidate(('()(', '(()())((')) == 'No'
    assert candidate(('((())', '(()(')) == 'No'
    assert candidate((')', '())())')) == 'No'
    assert candidate(('()(', '()(')) == 'No'
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate(('(()()(', '(()(())')) == 'No'
    assert candidate(('())())', '()')) == 'No'
    assert candidate(('(()(())', '())')) == 'Yes'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(('(()(', '(()(')) == 'No'
    assert candidate(('(())))', '(())))')) == 'No'
    assert candidate(('()(', '(()(')) == 'No'
    assert candidate(('(', '(()())((')) == 'No'
    assert candidate(['(', ')']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate(('())())', '(()(())')) == 'No'
    assert candidate(('())', '()')) == 'No'
    assert candidate(('(', '()))()')) == 'No'
    assert candidate(('())())', '(()(')) == 'Yes'
    assert candidate(('(()(())', ')())')) == 'No'
    assert candidate(('((((', '()')) == 'No'
    assert candidate((')())', '(())))')) == 'No'
    assert candidate(('(()())((', ')')) == 'No'
    assert candidate(('()(', ')())')) == 'No'
    assert candidate(('())', '()(')) == 'Yes'
    assert candidate(('()', '(()(())')) == 'No'
    assert candidate((')(()', '(())))')) == 'No'
    assert candidate(('(()()(', '()(')) == 'No'
    assert candidate(('())())', ')')) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate((')', ')')) == 'No'
    assert candidate(('())())', ')(()')) == 'No'
    assert candidate(('()))()', '(()(')) == 'Yes'
    assert candidate((')())', '((((')) == 'No'
    assert candidate(('(()(())', '(()()(')) == 'No'
    assert candidate(('()', ')())')) == 'No'
    assert candidate(('(())))', '(()()(')) == 'Yes'
    assert candidate((')(', ')(()')) == 'No'
    assert candidate(('(()()(', '(())))')) == 'Yes'
    assert candidate(('(())))', '(()(())')) == 'No'
    assert candidate(('((((', '(()(')) == 'No'
    assert candidate([')', '(']) == 'Yes'
    assert candidate((')(()', '())')) == 'No'
    assert candidate((')())', '())())')) == 'No'

if __name__ == '__main__':
    check(match_parens)